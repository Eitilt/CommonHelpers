<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AgEitilt.Storage</name>
    </assembly>
    <members>
        <member name="T:AgEitilt.Common.Storage.CreationCollisionOption">
            <summary>
            Specifies what to do if an with the specified name already exists in
            the current folder when you create a new file or folder.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Storage.CreationCollisionOption.FailIfExists">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Storage.CreationCollisionOption.GenerateUniqueName">
            <summary>
            Automatically append a number to the base name of the new file or
            folder.
            </summary>
            
            <remarks>
            For example, if the folder <c>MyFolder (2)</c> already exists, the
            resulting folder will be <c>MyFolder (3)</c>, and if the file
            <c>MyFile.xaml.cs</c> does, the new one will be named
            <c>MyFile (2).xaml.cs</c>.
            </remarks>
        </member>
        <member name="F:AgEitilt.Common.Storage.CreationCollisionOption.OpenIfExists">
            <summary>
            Return the existing item.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Storage.CreationCollisionOption.ReplaceExisting">
            <summary>
            Replace the existing item.
            </summary>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStorageFile">
            <summary>
            Represents a file. Provides information about the file and its
            contents, and ways to manipulate both.
            </summary>
            
            <seealso cref="T:AgEitilt.Common.Storage.StorageFile"/>
        </member>
        <member name="P:AgEitilt.Common.Storage.IStorageFile.ContentType">
            <summary>
            Get the MIME type of the file contents.
            </summary>
            
            <value>
            The type in standard MIME format; for example, <c>audio/mpeg</c>.
            </value>
        </member>
        <member name="P:AgEitilt.Common.Storage.IStorageFile.FileType">
            <summary>
            Gets the type of the file as declared by its extension.
            </summary>
            
            <value>
            The file extension; for example, <c>jpg</c>.
            </value>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFile.CopyAndReplaceAsync(AgEitilt.Common.Storage.IStorageFile)">
            <summary>
            Replaces the specified file with a copy of this file.
            </summary>
            
            <param name="fileToReplace">The file to replace.</param>
            
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/>, with no associated value.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.MoveAndReplaceAsync(AgEitilt.Common.Storage.IStorageFile)"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.CopyAsync(AgEitilt.Common.Storage.IStorageFolder,System.String,AgEitilt.Common.Storage.NameCollisionOption)"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFile.CopyAsync(AgEitilt.Common.Storage.IStorageFolder,AgEitilt.Common.Storage.NameCollisionOption)">
            <summary>
            Creates a copy of this file in the specified folder.
            </summary>
            
            <remarks>
            The default value of <paramref name="option"/> was chosen for
            compatability with the <c>Windows.Storage</c> implementation.
            </remarks>
            
            <param name="destinationFolder">
            The folder where the copy will be created.
            </param>
            <param name="option">
            The method used to handle situations where a file or folder by
            this name already exists in <paramref name="destinationFolder"/>.
            <para />
            Default value is <see cref="F:AgEitilt.Common.Storage.NameCollisionOption.FailIfExists"/>.
            </param>
            
            <returns>
            A handle to the new file, once the <see cref="T:System.Threading.Tasks.Task`1"/>
            completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.MoveAsync(AgEitilt.Common.Storage.IStorageFolder,AgEitilt.Common.Storage.NameCollisionOption)"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFile.CopyAsync(AgEitilt.Common.Storage.IStorageFolder,System.String,AgEitilt.Common.Storage.NameCollisionOption)">
            <summary>
            Creates a copy of this file in the specified folder, under a new
            name.
            </summary>
            
            <param name="destinationFolder">
            The folder where the copy will be created.
            </param>
            <param name="desiredName">
            The name under which the copy will try to be saved. If a file of
            this name already exists in <paramref name="destinationFolder"/>,
            the behaviour is determined by <paramref name="option"/>.
            </param>
            <param name="option">
            The method used to handle situations where a file or folder by the
            name of <paramref name="desiredName"/> already exists in
            <paramref name="destinationFolder"/>.
            <para />
            Default value is
            <see cref="F:AgEitilt.Common.Storage.NameCollisionOption.GenerateUniqueName"/>.
            </param>
            
            <returns>
            A handle to the new file, once the <see cref="T:System.Threading.Tasks.Task`1"/>
            completes.
            </returns>
            
            <seealso cref="P:AgEitilt.Common.Storage.IStorageItem.Name"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.MoveAsync(AgEitilt.Common.Storage.IStorageFolder,System.String,AgEitilt.Common.Storage.NameCollisionOption)"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.CopyAndReplaceAsync(AgEitilt.Common.Storage.IStorageFile)"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFile.MoveAndReplaceAsync(AgEitilt.Common.Storage.IStorageFile)">
            <summary>
            Replaces the specified file with this file, removing the latter
            from its current location.
            </summary>
            
            <remarks>
            This has the same result as calling
            <see cref="M:AgEitilt.Common.Storage.IStorageFile.MoveAsync(AgEitilt.Common.Storage.IStorageFolder,System.String,AgEitilt.Common.Storage.NameCollisionOption)"/>
            with <c>desiredName</c> set to <see cref="P:AgEitilt.Common.Storage.IStorageItem.Name"/> and
            <c>option</c> left as the default value.
            </remarks>
            
            <param name="fileToReplace">The file to replace.</param>
            
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/>, with no associated value.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.CopyAndReplaceAsync(AgEitilt.Common.Storage.IStorageFile)"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.MoveAsync(AgEitilt.Common.Storage.IStorageFolder,System.String,AgEitilt.Common.Storage.NameCollisionOption)"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFile.MoveAsync(AgEitilt.Common.Storage.IStorageFolder,AgEitilt.Common.Storage.NameCollisionOption)">
            <summary>
            Moves this file to the specified folder.
            </summary>
            
            <remarks>
            The default value of <paramref name="option"/> was chosen for
            compatibility with the <c>Windows.Storage</c> implementation.
            </remarks>
            
            <param name="destinationFolder">
            The new location of this file.
            </param>
            <param name="option">
            The method used to handle situations where a file or folder by
            this name already exists in <paramref name="destinationFolder"/>.
            <para />
            Default value is <see cref="F:AgEitilt.Common.Storage.NameCollisionOption.FailIfExists"/>.
            </param>
            
            <returns>
            A handle to the new file, once the <see cref="T:System.Threading.Tasks.Task`1"/>
            completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.CopyAsync(AgEitilt.Common.Storage.IStorageFolder,AgEitilt.Common.Storage.NameCollisionOption)"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFile.MoveAsync(AgEitilt.Common.Storage.IStorageFolder,System.String,AgEitilt.Common.Storage.NameCollisionOption)">
            <summary>
            Moves and renames this file to the specified folder and name.
            </summary>
            
            <param name="destinationFolder">
            The new location of this file.
            </param>
            <param name="desiredName">
            The name under which the item will try to be saved. If a file of
            this name already exists in <paramref name="destinationFolder"/>,
            the behaviour is determined by <paramref name="option"/>.
            </param>
            <param name="option">
            The method used to handle situations where a file or folder by the
            name of <paramref name="desiredName"/> already exists in
            <paramref name="destinationFolder"/>.
            <para />
            Default value is
            <see cref="F:AgEitilt.Common.Storage.NameCollisionOption.GenerateUniqueName"/>.
            </param>
            
            <returns>
            A handle to the new file, once the <see cref="T:System.Threading.Tasks.Task`1"/>
            completes.
            </returns>
            
            <seealso cref="P:AgEitilt.Common.Storage.IStorageItem.Name"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.CopyAsync(AgEitilt.Common.Storage.IStorageFolder,System.String,AgEitilt.Common.Storage.NameCollisionOption)"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageItem.RenameAsync(System.String,AgEitilt.Common.Storage.NameCollisionOption)"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.MoveAndReplaceAsync(AgEitilt.Common.Storage.IStorageFile)"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFile.OpenAsync(AgEitilt.Common.Storage.FileAccessMode)">
            <summary>
            Opens a random-access stream over the file.
            </summary>
            
            <param name="accessMode">The type of access to allow.</param>
            
            <returns>
            A stream providing access to the data within the file, once the
            <see cref="T:System.Threading.Tasks.Task`1"/> completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile2.OpenAsync(AgEitilt.Common.Storage.FileAccessMode,AgEitilt.Common.Storage.StorageOpenOptions)"/>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStorageFile2">
            <summary>
            Provides additional methods for manipulating files.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFile2.OpenAsync(AgEitilt.Common.Storage.FileAccessMode,AgEitilt.Common.Storage.StorageOpenOptions)">
            <summary>
            Opens a random-access stream over the file.
            </summary>
            
            <param name="accessMode">The type of access to request.</param>
            <param name="options">
            The allowed interactions between multiple streams reading from or
            writing to this file.
            </param>
            
            <returns>
            A stream providing access to the data within the file, once the
            <see cref="T:System.Threading.Tasks.Task`1"/> completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFile.OpenAsync(AgEitilt.Common.Storage.FileAccessMode)"/>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStorageFilePropertiesWithAvailability">
            <summary>
            Provides access to the file's availability.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Storage.IStorageFilePropertiesWithAvailability.IsAvailable">
            <summary>
            Indicates whether the file is located in an accessible location.
            </summary>
            
            <value>
            <c>true</c> if the file is local (and all parent folders can be
            read by this process), if it is cached locally, or if it can be
            downloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStorageFolder">
            <summary>
            Manipulates folders and their contents, and provides information about
            both.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFolder.CreateFileAsync(System.String,AgEitilt.Common.Storage.CreationCollisionOption)">
            <summary>
            Creates a new file in this folder.
            </summary>
            
            <param name="desiredName">
            The desired name of the file to create.
            </param>
            <param name="option">
            The method used to handle situations where a file or folder by
            the name of <paramref name="desiredName"/> already exists in this
            folder.
            <para />
            Default value is
            <see cref="F:AgEitilt.Common.Storage.CreationCollisionOption.FailIfExists"/>.
            </param>
            
            <returns>
            A handle to the new file, once the <see cref="T:System.Threading.Tasks.Task`1"/>
            completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.CreateFolderAsync(System.String,AgEitilt.Common.Storage.CreationCollisionOption)"/>
            <seealso cref="P:AgEitilt.Common.Storage.IStorageItem.Name"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFolder.CreateFolderAsync(System.String,AgEitilt.Common.Storage.CreationCollisionOption)">
            <summary>
            Creates a new folder nested within this folder.
            </summary>
            
            <param name="desiredName">
            The desired name of the folder to create.
            </param>
            <param name="option">
            The method used to handle situations where a file or folder by
            the name of <paramref name="desiredName"/> already exists in this
            folder.
            <para />
            Default value is
            <see cref="F:AgEitilt.Common.Storage.CreationCollisionOption.FailIfExists"/>.
            </param>
            
            <returns>
            A handle to the new folder, once the <see cref="T:System.Threading.Tasks.Task`1"/>
            completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.CreateFileAsync(System.String,AgEitilt.Common.Storage.CreationCollisionOption)"/>
            <seealso cref="P:AgEitilt.Common.Storage.IStorageItem.Name"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFolder.GetFileAsync(System.String)">
            <summary>
            Gets the specified file using this folder as the base of the
            relative path.
            </summary>
            
            <remarks>
            If the file is located within this folder, <paramref name="path"/>
            may simply be the <see cref="P:AgEitilt.Common.Storage.IStorageItem.Name"/>.
            </remarks>
            
            <param name="path">The path relative to this folder.</param>
            
            <returns>
            A handle to the file, once the <see cref="T:System.Threading.Tasks.Task`1"/>
            completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetFilesAsync"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetItemAsync(System.String)"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFolder.GetFilesAsync">
            <summary>
            Gets all files contained in this folder.
            </summary>
            
            <returns>
            A list of handles to all such files, once the
            <see cref="T:System.Threading.Tasks.Task`1"/> completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetFileAsync(System.String)"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetItemsAsync"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFolder.GetFolderAsync(System.String)">
            <summary>
            Gets the specified folder using this one as the base of the
            relative path.
            </summary>
            
            <remarks>
            If the folder is located within this one, <paramref name="path"/>
            may simply be the <see cref="P:AgEitilt.Common.Storage.IStorageItem.Name"/>.
            </remarks>
            
            <param name="path">The path relative to this folder.</param>
            
            <returns>
            A handle to the folder, once the <see cref="T:System.Threading.Tasks.Task`1"/>
            completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetFoldersAsync"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetItemAsync(System.String)"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFolder.GetFoldersAsync">
            <summary>
            Gets all folders nested within this one.
            </summary>
            
            <returns>
            A list of handles to all such folders, once the
            <see cref="T:System.Threading.Tasks.Task`1"/> completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetFolderAsync(System.String)"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetItemsAsync"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFolder.GetItemAsync(System.String)">
            <summary>
            Gets the specified storage item using this folder as the base of
            the relative path.
            </summary>
            
            <remarks>
            If the item is located within this folder, <paramref name="path"/>
            may simply be the <see cref="P:AgEitilt.Common.Storage.IStorageItem.Name"/>.
            </remarks>
            
            <param name="path">The path relative to this folder.</param>
            
            <returns>
            A handle to the storage item, once the <see cref="T:System.Threading.Tasks.Task`1"/>
            completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetItemsAsync"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder2.TryGetItemAsync(System.String)"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetFileAsync(System.String)"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetFolderAsync(System.String)"/>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFolder.GetItemsAsync">
            <summary>
            Gets all storage items contained in this folder.
            </summary>
            
            <returns>
            A list of handles to all such items, once the
            <see cref="T:System.Threading.Tasks.Task`1"/> completes.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetItemAsync(System.String)"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetFilesAsync"/>
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetFoldersAsync"/>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStorageFolder2">
            <summary>
            Provides additional methods for manipulating folders and their
            contents.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageFolder2.TryGetItemAsync(System.String)">
            <summary>
            Try to get a single storage item from the current folder by using
            the name of the item.
            </summary>
            
            <param name="name">
            The name (or path relative to the current folder) of the storage
            item to try to retrieve.
            </param>
            
            <returns>
            A handle to the requested item, or <c>null</c> if it does not
            exist, once the task is complete.
            </returns>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageFolder.GetItemAsync(System.String)"/>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStorageItem">
            <summary>
            Manipulates storage items (files and folders) and their contents,
            and provides information about them.
            </summary>
            
            <seealso cref="T:AgEitilt.Common.Storage.StorageFile"/>
            <seealso cref="T:AgEitilt.Common.Storage.StorageFolder"/>
        </member>
        <member name="P:AgEitilt.Common.Storage.IStorageItem.Attributes">
            <summary>
            Describes the properties of a storage item.
            </summary>
            
            <value>The attributes of the file or folder.</value>
        </member>
        <member name="P:AgEitilt.Common.Storage.IStorageItem.DateCreated">
            <summary>
            Gets the date and time the current item was created.
            </summary>
            
            <remarks>
            For the date and time of the last edit, see
            <see cref="M:AgEitilt.Common.Storage.IStorageItem.GetBasicPropertiesAsync"/>.
            </remarks>
            
            <value>
            The date and time the current item was created, or <c>null</c> if
            this information is not included on the file; for example (in
            string format), "Fri Sep 16 13:47:08 PDT 2011".
            </value>
        </member>
        <member name="P:AgEitilt.Common.Storage.IStorageItem.Name">
            <summary>
            Gets the name of the storage item, including (if it exists) the
            file extension.
            </summary>
            
            <value>The full name of the file or folder.</value>
            
            <seealso cref="M:AgEitilt.Common.Storage.IStorageItem.RenameAsync(System.String,AgEitilt.Common.Storage.NameCollisionOption)"/>
        </member>
        <member name="P:AgEitilt.Common.Storage.IStorageItem.Path">
            <summary>
            The full path of the file on the file system, if it is located in
            such an accessible place.
            </summary>
            
            <remarks>
            Do not rely on this property to access an item because some items
            may not have file-system paths. For example, if the item is backed
            by a URI, or was picked using the file picker.
            </remarks>
            
            <value>
            The full path of the item (including its name), or an empty string
            if it is not physically identifiable on the file system.
            </value>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageItem.DeleteAsync(AgEitilt.Common.Storage.StorageDeleteOption)">
            <summary>
            Removes the current item from disk.
            </summary>
            
            <param name="option">
            Whether to always skip the Recycle Bin and permanently delete the
            item, or if that decision should rely on the default behaviour.
            <para/>
            Default value is the latter
            (<see cref="F:AgEitilt.Common.Storage.StorageDeleteOption.Default"/>).
            </param>
            
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/>, with no associated value.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageItem.GetBasicPropertiesAsync">
            <summary>
            Gets the basic properties of the current item.
            </summary>
            
            <returns>
            The basic properties describing the item, once the
            <see cref="T:System.Threading.Tasks.Task`1"/> completes.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageItem.IsOfType(AgEitilt.Common.Storage.StorageItemTypes)">
            <summary>
            Determines whether the current item is of the specified type.
            </summary>
            
            <param name="type">The value to match against.</param>
            
            <returns>
            <c>true</c> if the item is <paramref name="type"/>, otherwise
            <c>false</c>.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageItem.RenameAsync(System.String,AgEitilt.Common.Storage.NameCollisionOption)">
            <summary>
            Renames the current item.
            </summary>
            
            <param name="desiredName">
            The name under which the item will try to be saved. If a file of
            this name already exists in this folder, the behaviour is
            determined by <paramref name="option"/>.
            </param>
            <param name="option">
            The method used to handle situations where a file by the name of
            <paramref name="desiredName"/> already exists in this folder.
            <para />
            Default value is <see cref="F:AgEitilt.Common.Storage.NameCollisionOption.FailIfExists"/>.
            </param>
            
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/>, with no associated value.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="desiredName"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A file by the name of <paramref name="desiredName"/> already
            exists and <paramref name="option"/> is
            <see cref="F:AgEitilt.Common.Storage.NameCollisionOption.FailIfExists"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="desiredName"/> (as appended to the folder path) is
            longer than allowed by the file system.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="desiredName"/> is not a valid name for the file
            system.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            This file is deleted before the returned <see cref="T:System.Threading.Tasks.Task"/>
            finishes.
            </exception>
            
            <seealso cref="P:AgEitilt.Common.Storage.IStorageItem.Name"/>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStorageItem2">
            <summary>
            Provides additional information about files and folders.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageItem2.GetParentAsync">
            <summary>
            Gets the folder containing this file.
            </summary>
            
            <returns>
            A handle to the folder, once the <see cref="T:System.Threading.Tasks.Task`1"/>
            completes.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Storage.IStorageItem2.IsEqual(AgEitilt.Common.Storage.IStorageItem)">
            <summary>
            Indicates whether this storage item and another refer to the same
            file, and access it via the same path.
            </summary>
            
            <param name="item">The storage item to compare against.</param>
            
            <returns>
            <c>true</c> if the this file is equal to <paramref name="item"/>;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStorageItemProperties">
            <summary>
            Provides access to common properties on storage items and their
            content.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Storage.IStorageItemProperties.DisplayName">
            <summary>
            Gets a user-friendly name for the file.
            </summary>
            
            <remarks>
            This will typically be <see cref="P:AgEitilt.Common.Storage.IStorageItem.Name"/> stripped of
            any file extension.
            </remarks>
            
            <value>
            The user-friendly name.
            </value>
        </member>
        <member name="P:AgEitilt.Common.Storage.IStorageItemProperties.DisplayType">
            <summary>
            Gets a user-friendly description of the item's content.
            </summary>
            
            <remarks>
            For example, an image file might return "JPG image".
            </remarks>
            
            <value>
            The user-friendly type of content.
            </value>
        </member>
        <member name="P:AgEitilt.Common.Storage.IStorageItemProperties.Properties">
            <summary>
            Gets a description of the properties of the contained content.
            </summary>
            
            <value>An object listing such properties.</value>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStorageItemProperties2">
            <summary>
            Provides methods to retrieve scaled thumbnail images.
            </summary>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStorageItemPropertiesWithProvider">
            <summary>
            Provides access to information about the service providing this file.
            </summary>
        </member>
        <member name="T:AgEitilt.Common.Storage.IStreamedFileDataRequest">
            <summary>
            Represents a sequential-access output stream that indicates a request
            for the data stream of a <see cref="T:AgEitilt.Common.Storage.StorageFile"/>.
            </summary>
        </member>
        <member name="T:AgEitilt.Common.Storage.NameCollisionOption">
            <summary>
            Specifies what to do if a file or folder with the desired name already
            exists in the destination when you copy, move, or rename an item.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Storage.NameCollisionOption.FailIfExists">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Storage.NameCollisionOption.GenerateUniqueName">
            <summary>
            Automatically append a number to the base name of the new file or
            folder.
            </summary>
            
            <remarks>
            For example, if the folder <c>MyFolder (2)</c> already exists, the
            resulting folder will be <c>MyFolder (3)</c>, and if the file
            <c>MyFile.xaml.cs</c> does, the new one will be named
            <c>MyFile (2).xaml.cs</c>.
            </remarks>
        </member>
        <member name="F:AgEitilt.Common.Storage.NameCollisionOption.ReplaceExisting">
            <summary>
            Replace the existing item. This will delete any contents if the
            existing item is a folder.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Storage.NameCollisionOption.ReplaceOrMerge">
            <summary>
            If both the existing item and the one being moved or copied are
            folders, merge the children of both (replacing any files that
            share the same name). Otherwise, this functions identically to
            <see cref="F:AgEitilt.Common.Storage.NameCollisionOption.ReplaceExisting"/>.
            </summary>
            
            <remarks>
            This is an extension on the <c>Windows.System</c> enum.
            </remarks>
        </member>
        <member name="F:AgEitilt.Common.Storage.NameCollisionOption.MergeAlongside">
            <summary>
            If both the existing item and the one being moved or copied are
            folders, merge the children of both (generating new names for any
            files that share the same name according to the rules described
            for <see cref="F:AgEitilt.Common.Storage.NameCollisionOption.GenerateUniqueName"/>). Otherwise, this functions
            identically to <see cref="F:AgEitilt.Common.Storage.NameCollisionOption.ReplaceExisting"/>.
            </summary>
            
            <remarks>
            This is an extension on the <c>Windows.System</c> enum.
            </remarks>
        </member>
        <member name="T:AgEitilt.Common.Storage.StorageDeleteOption">
            <summary>
            Specifies whether a deleted item is moved to the Recycle Bin (or the
            platform equivalent) or permanently deleted.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Storage.StorageDeleteOption.Default">
            <summary>
            Use the default behaviour.
            </summary>
            
            <remarks>
            TODO: Describe the decisions made to determine behaviour.
            For reference, on Windows 10:
            <list type="bullet">
            <item>
            If the item is in application storage (accessed through
            <c>ApplicationData</c>), then permanently deleted
            </item>
            <item>
            Delete according to default behaviour of File Explorer for the
            particular save location
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:AgEitilt.Common.Storage.StorageDeleteOption.PermanentDelete">
            <summary>
            Permanently deletes the item. The item is not moved to the
            Recycle Bin.
            </summary>
        </member>
        <member name="T:AgEitilt.Common.Storage.StorageOpenOptions">
            <summary>
            Specify the relative permissions if a file is accessed by both input
            and output streams (both read and write).
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Storage.StorageOpenOptions.None">
            <summary>
            The default behaviour: readers will have lower priority than any
            writers, and will fail if writes occur.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Storage.StorageOpenOptions.AllowOnlyReaders">
            <summary>
            No writers are allowed on the file, and attempting to open a new
            writer will fail; likewise, opening a reader with this option will
            fail if a writer is already open.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Storage.StorageOpenOptions.AllowReadersAndWriters">
            <summary>
            A writer with the same priority as a writer, and so is not
            invalidated by other streams writing to the same file.
            </summary>
            
            <remarks>
            The documentation is unclear on the behaviour; this is my best
            guess at its meaning.
            </remarks>
        </member>
    </members>
</doc>
