<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AgEitilt.Dictionary</name>
    </assembly>
    <members>
        <member name="T:AgEitilt.Common.Dictionary.ArrayEqualityComparer`1">
            <summary>
            Test sequences for equality based on their values, not their
            object references.
            </summary>
            
            <remarks>
            Implementation from <see href="http://stackoverflow.com/a/7244729"/>.
            </remarks>
            
            <typeparam name="TElement">
            The underlying type of the sequence.
            </typeparam>
        </member>
        <member name="F:AgEitilt.Common.Dictionary.ArrayEqualityComparer`1.elementComparer">
            <summary>
            Provide a more robust meant of testing the equality of
            elements.
            </summary>
            
            <remarks>
            TODO: Allow specifying custom EqualityComparer.
            </remarks>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ArrayEqualityComparer`1.Equals(`0[],`0[])">
            <summary>
            Check two sequences for value equality.
            </summary>
            
            <returns>Whether the sequences are equal.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ArrayEqualityComparer`1.GetHashCode(`0[])">
            <summary>
            Calculate a hash code based on the values of the sequence.
            </summary>
            
            <param name="obj">The sequence to hash.</param>
            
            <returns>The calculated hash.</returns>
        </member>
        <member name="T:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2">
            <summary>
            Represents a collection of keys and values while notifying listeners
            when those contents change.
            </summary>
            
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="F:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.dictionary">
            <summary>
            The underlying item store.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.Dictionary">
            <summary>
            Retrieve a reference to the underlying
            <see cref="T:System.Collections.Generic.IDictionary`2"/> used by the particular
            instance as determined by the implementation.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2"/> class
            that is empty, has the default initial capacity, and uses the
            default equality comparer for the key type.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2"/> class
            that contains elements copied from the specified collection of
            key/value pairs and uses the default equality comparer for the key
            type.
            </summary>
            
            <remarks>
            The initial capacity of the new
            <see cref="T:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2"/> is
            large enough to contain all the elements in
            <paramref name="collection"/>.
            </remarks>
            
            <param name="collection">
            The elements which should be copied to the new
            <see cref="T:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2"/>.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="collection"/> contains one or more duplicate keys.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2"/> class
            that is empty, has the default initial capacity, and uses the
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing keys, or <c>null</c> to use the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the key.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2"/> class
            that contains elements copied from the specified collection of
            key/value pairs and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            
            <remarks>
            The initial capacity of the new
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> is large enough
            to contain all the elements in <paramref name="collection"/>.
            </remarks>
            
            <param name="collection">
            The elements which should be copied to the new
            <see cref="T:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2"/>.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing keys, or <c>null</c> to use the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the key.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="collection"/> contains one or more duplicate keys.
            </exception>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.IsEmpty">
            <summary>
            Simplifies testing whether the dictionary contains no items.
            </summary>
            
            <value>
            <c>true</c> if no key/value pair exists in the dictionary;
            otherwise <c>false</c>.
            </value>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
            <summary>
            Add the item generated by <paramref name="updateValueFactory"/> to
            the dictionary if <paramref name="key"/> already exists in it, or
            that generated by <paramref name="addValueFactory"/> otherwise;
            returning the respective value.
            </summary>
            
            <param name="key">
            The object to use as the key of the element to add or update.
            </param>
            <param name="addValueFactory">
            The function used to generate a value if the dictionary did not
            contain <paramref name="key"/>.
            </param>
            <param name="updateValueFactory">
            The function used to generate a value if the dictionary already
            contained <paramref name="key"/>.
            </param>
            
            <returns>
            The value generated by <paramref name="updateValueFactory"/> if
            the key already existed; otherwise that generated by
            <paramref name="addValueFactory"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
            <summary>
            Add <paramref name="addValue"/> to the dictionary if
            <paramref name="key"/> already exists in it, or
            <paramref name="addValue"/> otherwise; returning the respective
            value.
            </summary>
            
            <param name="key">
            The object to use as the key of the element to add or update.
            </param>
            <param name="addValue">
            The value to add if the dictionary did not contain
            <paramref name="key"/>.
            </param>
            <param name="updateValueFactory">
            The function used to generate a value if the dictionary already
            contained <paramref name="key"/>.
            </param>
            
            <returns>
            The value generated by <paramref name="updateValueFactory"/> if
            the key already existed; otherwise <paramref name="addValue"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Retrieve the requested value from the dictionary, creating a new
            entry if necessary.
            </summary>
            
            <param name="key">The dictionary key to access.</param>
            <param name="valueFactory">
            The function used to generate a value if the dictionary did not
            contain <paramref name="key"/>.
            </param>
            
            <returns>
            The object located at <paramref name="key"/> in the dictionary.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            Retrieve the requested value from the dictionary, creating a new
            entry if necessary.
            </summary>
            
            <param name="key">The dictionary key to access.</param>
            <param name="value">
            The value to add if <paramref name="key"/> was not in the
            dictionary.
            </param>
            
            <returns>
            The object located at <paramref name="key"/> in the dictionary.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.ToArray">
            <summary>
            Copies the key/value pairs comprising the dictionary to an array.
            </summary>
            
            <returns>The array of key/value pairs.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.TryAdd(`0,`1)">
            <summary>
            Add a value to the dictionary as long as the desired key does not
            already exist.
            </summary>
            
            <param name="key">
            The object to use as the key of the element to add.
            </param>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            
            <returns>
            <c>true</c> if the value was added successfully, or false if
            <paramref name="key"/> already exists.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Remove a value from the dictionary if the given key exists.
            </summary>
            
            <param name="key">The dictionary key to remove.</param>
            <param name="value">
            Once this method completes, the value previously associated with
            <paramref name="key"/> if it existed in the dictionary, or the
            default value of <typeparamref name="TValue"/> otherwise.
            </param>
            
            <returns>
            <c>true</c> if the value was removed successfully, or false if
            <paramref name="key"/> did not exist.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ConcurrentObservableDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Replace a value in the dictionary if the given key exists and the
            existing value is equal to a desired comparison.
            </summary>
            
            <param name="key">The dictionary key to replace.</param>
            <param name="newValue">
            The value to update the key with, if all conditions are met.
            </param>
            <param name="comparisonValue">
            The value to use for testing the equality of the existing key.
            </param>
            
            <returns>
            <c>true</c> if the value was replaced successfully, or false if
            <paramref name="key"/> did not exist or the existing value is not
            equal to <paramref name="comparisonValue"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension">
            <summary>
            Extension methods on the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            interface.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
            Add the item generated by <paramref name="updateValueFactory"/> to
            the dictionary if <paramref name="key"/> already exists in it, or
            that generated by <paramref name="addValueFactory"/> otherwise;
            returning the respective value.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            <param name="key">
            The object to use as the key of the element to add or update.
            </param>
            <param name="addValueFactory">
            The function used to generate a value if the dictionary did not
            contain <paramref name="key"/>.
            </param>
            <param name="updateValueFactory">
            The function used to generate a value if the dictionary already
            contained <paramref name="key"/>.
            </param>
            
            <returns>
            The value generated by <paramref name="updateValueFactory"/> if
            the key already existed; otherwise that generated by
            <paramref name="addValueFactory"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
            Add <paramref name="addValue"/> to the dictionary if
            <paramref name="key"/> already exists in it, or
            <paramref name="addValue"/> otherwise; returning the respective
            value.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            <param name="key">
            The object to use as the key of the element to add or update.
            </param>
            <param name="addValue">
            The value to add if the dictionary did not contain
            <paramref name="key"/>.
            </param>
            <param name="updateValueFactory">
            The function used to generate a value if the dictionary already
            contained <paramref name="key"/>.
            </param>
            
            <returns>
            The value generated by <paramref name="updateValueFactory"/> if
            the key already existed; otherwise <paramref name="addValue"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Retrieve the requested value from the dictionary, creating a new
            entry if necessary using the default <typeparamref name="TValue"/>
            constructor.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            <param name="key">The dictionary key to access.</param>
            
            <returns>
            The object located at <paramref name="key"/> in
            <paramref name="dictionary"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Retrieve the requested value from the dictionary, creating a new
            entry if necessary.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            <param name="key">The dictionary key to access.</param>
            <param name="value">
            The value to add if <paramref name="key"/> was not in the
            dictionary.
            </param>
            
            <returns>
            The object located at <paramref name="key"/> in
            <paramref name="dictionary"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Retrieve the requested value from the dictionary, creating a new
            entry if necessary.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            <param name="key">The dictionary key to access.</param>
            <param name="valueFactory">
            The function used to generate a value if the dictionary did not
            contain <paramref name="key"/>.
            </param>
            
            <returns>
            The object located at <paramref name="key"/> in
            <paramref name="dictionary"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.IsEmpty``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Simplifies testing whether the dictionary contains no items.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            
            <returns>
            <c>true</c> if no key/value pair exists in the dictionary;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.ToArray``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Copies the key/value pairs comprising the dictionary to an array.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            
            <returns>The array of key/value pairs.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Add a value to the dictionary as long as the desired key does not
            already exist.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            
            <returns>
            <c>true</c> if the value was added successfully, or false if
            <paramref name="key"/> already exists.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.TryRemove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Remove a value from the dictionary if the given key exists.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            <param name="key">The dictionary key to remove.</param>
            <param name="value">
            Once this method completes, the value previously associated with
            <paramref name="key"/> if it existed in the dictionary, or the
            default value of <typeparamref name="TValue"/> otherwise.
            </param>
            
            <returns>
            <c>true</c> if the value was removed successfully, or false if
            <paramref name="key"/> did not exist.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Replace a value in the dictionary if the given key exists.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            <param name="key">The dictionary key to replace.</param>
            <param name="newValue">
            The value to update the key with, if all conditions are met.
            </param>
            
            <returns>
            <c>true</c> if the value was replaced successfully, or false if
            <paramref name="key"/> did not exist.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,``1)">
            <summary>
            Replace a value in the dictionary if the given key exists and the
            existing value is equal to a desired comparison.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            <param name="key">The dictionary key to replace.</param>
            <param name="newValue">
            The value to update the key with, if all conditions are met.
            </param>
            <param name="comparisonValue">
            The value to use for testing the equality of the existing key.
            </param>
            
            <returns>
            <c>true</c> if the value was replaced successfully, or false if
            <paramref name="key"/> did not exist or the existing value is not
            equal to <paramref name="comparisonValue"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.Extensions.DictionaryExtension.TryUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Predicate{``1})">
            <summary>
            Replace a value in the dictionary if the given key exists and the
            existing value is equal to a desired comparison.
            </summary>
            
            <typeparam name="TKey">
            The type used for the dictionary's keys.
            </typeparam>
            <typeparam name="TValue">
            The type used for the dictionary's values.
            </typeparam>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> on which to operate.
            </param>
            <param name="key">The dictionary key to replace.</param>
            <param name="newValue">
            The value to update the key with, if all conditions are met.
            </param>
            <param name="comparison">
            The test to use in deciding whether to replace the value.
            </param>
            
            <returns>
            <c>true</c> if the value was replaced successfully, or false if
            <paramref name="key"/> did not exist or
            <paramref name="comparison"/> returns <c>false</c> when passed the
            existing value.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:AgEitilt.Common.Dictionary.ObservableDictionary`2">
            <summary>
            Represents a collection of keys and values while notifying listeners
            when those contents change.
            </summary>
            
            <remarks>
            Retrieving a value by using its key is very fast, close to <c>O(1)</c>,
            because the underlying <see cref="T:System.Collections.Generic.Dictionary`2"/> class is
            implemented as a hash table.
            <para/>
            Each element is a key/value pair stored in a
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> object. When iterated using a
            <c>foreach</c> loop (<c>For Each</c> in Visual Basic, <c>for each</c>
            in C++), the enumerated objects are therefore of that type rather than
            either <typeparamref name="TKey"/> or <typeparamref name="TValue"/>.
            <para/>
            As long as an object is used as a key in the dictionary, it must not
            change in any way that affects its hash value. Every key must be
            unique according to the instance's equality comparer. A key cannot be
            <c>null</c>, but a value can be if the value type
            <typeparamref name="TKey"/> is a reference type.
            <para/>
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> requires an equality
            implementation to determine whether keys are equal. You can specify an
            implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic
            interface by using a constructor that accepts a comparer parameter; if
            you do not specify an implementation, the default generic equality
            comparer is used. If type <typeparamref name="TKey"/> implements the
            <see cref="T:System.IEquatable`1"/> generic interface, the default equality
            comparer uses that implementation.
            </remarks>
            
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="F:AgEitilt.Common.Dictionary.ObservableDictionary`2.dictionary">
            <summary>
            The underlying item store.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionary`2.Dictionary">
            <summary>
            Retrieve a reference to the underlying
            <see cref="T:System.Collections.Generic.IDictionary`2"/> used by the particular
            instance as determined by the implementation.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> class that is
            empty, has the default initial capacity, and uses the default
            equality comparer for the key type.
            </summary>
            
            <remarks>
            This constructor is an <c>O(1)</c> operation.
            </remarks>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> class that is
            empty, has the specified initial capacity, and uses the default
            equality comparer for the key type.
            </summary>
            
            <remarks>
            This constructor is an <c>O(1)</c> operation.
            </remarks>
            
            <param name="capacity">
            The initial number of elements that the dictionary can contain
            before needing to be expanded.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than 0.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> class that is
            empty, has the default initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            
            <remarks>
            This constructor is an <c>O(1)</c> operation.
            </remarks>
            
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing keys, or <c>null</c> to use the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the key.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> class that
            contains elements copied from the specified
            <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the default
            equality comparer for the key type.
            </summary>
            
            <remarks>
            The initial capacity of the new
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> is large enough
            to contain all the elements in <paramref name="dictionary"/>.
            <para/>
            This constructor is an <c>O(n)</c> operation, where <c>n</c> is
            the number of elements in <paramref name="dictionary"/>.
            </remarks>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are
            copied to the new <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/>.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> class that is
            empty, has the specified initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            
            <remarks>
            This constructor is an <c>O(1)</c> operation.
            </remarks>
            
            <param name="capacity">
            The initial number of elements that the dictionary can contain
            before needing to be expanded.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing keys, or <c>null</c> to use the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the key.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than 0.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> class that
            contains elements copied from the specified
            <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            
            <remarks>
            The initial capacity of the new
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> is large enough
            to contain all the elements in <paramref name="dictionary"/>.
            <para/>
            This constructor is an <c>O(n)</c> operation, where <c>n</c> is
            the number of elements in <paramref name="dictionary"/>.
            </remarks>
            
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are
            copied to the new <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/>.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing keys, or <c>null</c> to use the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the key.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary"/> contains one or more duplicate keys.
            </exception>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionary`2.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to
            determine equality of keys for the dictionary. 
            </summary>
            
            <remarks>
            Getting the value of this property is an <c>O(1)</c> operation.
            </remarks>
            
            <value>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic interface
            implementation that is used to determine equality of keys for the
            current <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionary`2"/> and to
            provide hash values for the keys.
            </value>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the
            <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            
            <remarks>
            The order of the keys in the
            <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> is
            unspecified, but it is the same order as the associated values in
            the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> 
            returned by the <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionary`2.Values"/> property.
            <para/>
            The returned <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>
            is not a static copy; instead, the
            <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> refers back
            to the keys in the original <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            Therefore, changes to the <see cref="T:System.Collections.Generic.Dictionary`2"/>
            continue to be reflected in the
            <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>.
            <para/>
            Getting the value of this property is an <c>O(1)</c> operation.
            </remarks>
            
            <value>
            A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> containing
            the keys in the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </value>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the
            <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            
            <remarks>
            The order of the values in the
            <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> is
            unspecified, but it is the same order as the associated values in
            the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 
            returned by the <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionary`2.Keys"/> property.
            <para/>
            The returned <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/>
            is not a static copy; instead, the
            <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> refers back
            to the values in the original
            <see cref="T:System.Collections.Generic.Dictionary`2"/>. Therefore, changes to the
            <see cref="T:System.Collections.Generic.Dictionary`2"/> continue to be reflected in
            the <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/>.
            <para/>
            Getting the value of this property is an <c>O(1)</c> operation.
            </remarks>
            
            <value>
            A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/> containing
            the values in the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </value>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            contains an element with the specified value.
            </summary>
            
            <remarks>
            This method is an <c>O(1)</c> operation, where <c>n</c> is
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Count"/>.
            </remarks>
            
            <param name="value">
            The value to locate. This can be <c>null</c> for reference types.
            </param>
            
            <returns>
            <c>true</c> if the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            contains an element with a value equal to <paramref name="value"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the key-value pairs in
            the dictionary.
            </summary>
            
            <remarks>
            This method is an <c>O(1)</c> operation.
            </remarks>
            
            <returns>
            An enumerator that can be used to iterate through the dictionary.
            </returns>
        </member>
        <member name="T:AgEitilt.Common.Dictionary.IObservableReadOnlyDictionary`2">
            <summary>
            Represents a generic read-only collection of key/value pairs while
            notifying listeners when those contents change.
            </summary>
            
            <remarks>
            Each element is a key/value pair stored in a
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> object. When iterated using a
            <c>foreach</c> loop (<c>For Each</c> in Visual Basic, <c>for each</c>
            in C++), the enumerated objects are therefore of that type rather than
            either <typeparamref name="TKey"/> or <typeparamref name="TValue"/>.
            <para/>
            Each pair must have a unique key. Implementations can vary in whether
            they allow that key to be <c>null</c>. The value can be <c>null</c>
            and does not have to be unique. The generic
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2"/> allows the
            contained keys and values to be enumerated, but it does not imply any
            particular sort order.
            </remarks>
            
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="T:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2">
            <summary>
            Represents a collection of keys and values while notifying listeners
            when those contents change, regardless of the underlying
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            
            <remarks>
            Each element is a key/value pair stored in a
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> object. When iterated using a
            <c>foreach</c> loop (<c>For Each</c> in Visual Basic, <c>for each</c>
            in C++), the enumerated objects are therefore of that type rather than
            either <typeparamref name="TKey"/> or <typeparamref name="TValue"/>.
            <para/>
            Each pair must have a unique key. Implementations can vary in whether
            they allow that key to be <c>null</c>. The value can be <c>null</c>
            and does not have to be unique. The generic
            <see cref="T:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2"/> allows the
            contained keys and values to be enumerated, but it does not imply any
            particular sort order.
            </remarks>
            
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary">
            <summary>
            Retrieve a reference to the underlying
            <see cref="T:System.Collections.Generic.IDictionary`2"/> used by the particular
            instance as determined by the implementation.
            </summary>
            
            <value>
            An instance providing methods common to all dictionaries.
            </value>
        </member>
        <member name="E:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
            
            <remarks>
            If the sent <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> is of
            type <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/>,
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"/>, or
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"/>,
            <see cref="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems"/> and (if
            applicable) <see cref="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems"/>
            are guaranteed to be an <see cref="T:System.Collections.IList"/> of
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects parameterized to
            <typeparamref name="TKey"/> and <typeparamref name="TValue"/>.
            </remarks>
        </member>
        <member name="E:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            
            <remarks>
            The <c>PropertyChanged</c> event can indicate all properties on
            the object have changed by using either <c>null</c> or
            <see cref="F:System.String.Empty"/> as the property name in the
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </remarks>
        </member>
        <member name="E:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.PropertyChanging">
            <summary>
            Occurs just before a property value changes.
            </summary>
            
            <remarks>
            The <c>PropertyChanging</c> event can indicate all properties on
            the object have changed by using either <c>null</c> or
            <see cref="F:System.String.Empty"/> as the property name in the
            <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/>.
            </remarks>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.DummyAction(System.Action)">
            <summary>
            Wrap an action to use it in, for example,
            <see cref="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendAddEvents(System.Func{System.Boolean},System.Func{System.Tuple{System.Boolean,`1}},System.Collections.Generic.KeyValuePair{`0,`1})"/>.
            </summary>
            
            <param name="action">The action to wrap.</param>
            
            <returns>The enclosing function.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.DummyAction(System.Func{System.Boolean})">
            <summary>
            Wrap a function to use it in, for example,
            <see cref="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendAddEvents(System.Func{System.Boolean},System.Func{System.Tuple{System.Boolean,`1}},System.Collections.Generic.KeyValuePair{`0,`1})"/>.
            </summary>
            
            <param name="action">The action to wrap.</param>
            
            <returns>The enclosing function.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.DummyAction(System.Func{`1})">
            <summary>
            Wrap a function to use it in, for example,
            <see cref="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendAddEvents(System.Func{System.Boolean},System.Func{System.Tuple{System.Boolean,`1}},System.Collections.Generic.KeyValuePair{`0,`1})"/>.
            </summary>
            
            <param name="action">The action to wrap.</param>
            
            <returns>The enclosing function.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendAddEvents(System.Func{System.Boolean},System.Func{System.Tuple{System.Boolean,`1}},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that some item is added to the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="preTest">
            A simplified approximation of the value returned by
            <paramref name="action"/>, but that doesn't result in any changes.
            </param>
            <param name="action">The action that causes the addition.</param>
            <param name="item">The new item.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendAddEvents(System.Func{System.Boolean},System.Func{System.Boolean},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that some item is added to the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="preTest">
            A simplified approximation of the value returned by
            <paramref name="action"/>, but that doesn't result in any changes.
            </param>
            <param name="action">The action that causes the addition.</param>
            <param name="item">The new item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendAddEvents(System.Func{System.Boolean},System.Func{System.Boolean},`0,`1)">
            <summary>
            Notify all relevant listeners that some item is added to the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="preTest">
            A simplified approximation of the value returned by
            <paramref name="action"/>, but that doesn't result in any changes.
            </param>
            <param name="action">The action that causes the addition.</param>
            <param name="key">The key at which the item is added.</param>
            <param name="value">The value of the new item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendAddEvents(System.Func{`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that some item is added to the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">The action that causes the addition.</param>
            <param name="item">The new item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendAddEvents(System.Func{`1},`0,`1)">
            <summary>
            Notify all relevant listeners that some item is added to the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">The action that causes the addition.</param>
            <param name="key">The key at which the item is added.</param>
            <param name="value">The value of the new item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendAddEvents(System.Action,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that some item is added to the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">The action that causes the addition.</param>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendAddEvents(System.Action,`0,`1)">
            <summary>
            Notify all relevant listeners that some item is added to the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">The action that causes the addition.</param>
            <param name="key">
            The key previously associated with the item.
            </param>
            <param name="value">The value of the item.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.OnAdding(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Perform any implementation-specific event handling when a new item
            is just about to be added to <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="item">The new item.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.OnAdd(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Perform any implementation-specific event handling when a new item
            has been added to <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="item">The new item.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendRemoveEvents(System.Func{System.Boolean},System.Func{System.Tuple{System.Boolean,`1}},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that some item is removed from the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="preTest">
            A simplified approximation of the value returned by
            <paramref name="action"/>, but that doesn't result in any changes.
            </param>
            <param name="action">The action that causes the removal.</param>
            <param name="item">The removed item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendRemoveEvents(System.Func{System.Boolean},System.Func{System.Boolean},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that some item is removed from the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="preTest">
            A simplified approximation of the value returned by
            <paramref name="action"/>, but that doesn't result in any changes.
            </param>
            <param name="action">The action that causes the removal.</param>
            <param name="item">The removed item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendRemoveEvents(System.Func{System.Boolean},System.Func{System.Boolean},`0,`1)">
            <summary>
            Notify all relevant listeners that some item is removed from the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="preTest">
            A simplified approximation of the value returned by
            <paramref name="action"/>, but that doesn't result in any changes.
            </param>
            <param name="action">The action that causes the removal.</param>
            <param name="key">
            The key previously associated with the item.
            </param>
            <param name="value">The value of the item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendRemoveEvents(System.Func{`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that some item is removed from the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">The action that causes the removal.</param>
            <param name="item">The removed item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendRemoveEvents(System.Func{`1},`0,`1)">
            <summary>
            Notify all relevant listeners that some item is removed from the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">The action that causes the removal.</param>
            <param name="key">
            The key previously associated with the item.
            </param>
            <param name="value">The value of the item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendRemoveEvents(System.Action,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that some item is removed from the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">The action that causes the removal.</param>
            <param name="item">The removed item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendRemoveEvents(System.Action,`0,`1)">
            <summary>
            Notify all relevant listeners that some item is removed from the
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">The action that causes the removal.</param>
            <param name="key">
            The key previously associated with the item.
            </param>
            <param name="value">The value of the item.</param>
            
            <returns>The value returned by <paramref name="action"/>.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.OnRemoving(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Perform any implementation-specific event handling when an item
            is just about to be removed from <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="item">The removed item.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.OnRemove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Perform any implementation-specific event handling when an item
            has been removed from <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="item">The removed item.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendReplaceEvents(System.Func{System.Boolean},System.Func{System.Tuple{System.Boolean,`1}},System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that the value associated with some
            key is changed in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="preTest">
            A simplified approximation of the value returned by
            <paramref name="action"/>, but that doesn't result in any changes.
            </param>
            <param name="action">
            The action that causes the replacement.
            </param>
            <param name="newItem">
            The item as it is now represented in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
            <param name="oldItem">
            The item as it was previously represented in
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendReplaceEvents(System.Func{System.Boolean},System.Func{System.Boolean},System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that the value associated with some
            key is changed in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="preTest">
            A simplified approximation of the value returned by
            <paramref name="action"/>, but that doesn't result in any changes.
            </param>
            <param name="action">
            The action that causes the replacement.
            </param>
            <param name="newItem">
            The item as it is now represented in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
            <param name="oldItem">
            The item as it was previously represented in
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendReplaceEvents(System.Func{System.Boolean},System.Func{System.Boolean},`0,`1,`1)">
            <summary>
            Notify all relevant listeners that the value associated with some
            key is changed in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="preTest">
            A simplified approximation of the value returned by
            <paramref name="action"/>, but that doesn't result in any changes.
            </param>
            <param name="action">
            The action that causes the replacement.
            </param>
            <param name="key">The key at which the change occurred.</param>
            <param name="newValue">
            The new value associated with <paramref name="key"/>.
            </param>
            <param name="oldValue">
            The value previously associated with <paramref name="key"/>.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendReplaceEvents(System.Func{`1},System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that the value associated with some
            key is changed in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">
            The action that causes the replacement.
            </param>
            <param name="newItem">
            The item as it is now represented in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
            <param name="oldItem">
            The item as it was previously represented in
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendReplaceEvents(System.Func{`1},`0,`1,`1)">
            <summary>
            Notify all relevant listeners that the value associated with some
            key is changed in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">
            The action that causes the replacement.
            </param>
            <param name="key">The key at which the change occurred.</param>
            <param name="newValue">
            The new value associated with <paramref name="key"/>.
            </param>
            <param name="oldValue">
            The value previously associated with <paramref name="key"/>.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendReplaceEvents(System.Action,System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Notify all relevant listeners that the value associated with some
            key is changed in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">
            The action that causes the replacement.
            </param>
            <param name="newItem">
            The item as it is now represented in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
            <param name="oldItem">
            The item as it was previously represented in
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendReplaceEvents(System.Action,`0,`1,`1)">
            <summary>
            Notify all relevant listeners that the value associated with some
            key is changed in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="action">
            The action that causes the replacement.
            </param>
            <param name="key">The key at which the change occurred.</param>
            <param name="newValue">
            The new value associated with <paramref name="key"/>.
            </param>
            <param name="oldValue">
            The value previously associated with <paramref name="key"/>.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.OnReplacing(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Perform any implementation-specific event handling when an item is
            just about to be changed in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="newItem">
            The item as it is now represented in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
            <param name="oldItem">
            The item as it was previously represented in
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.OnReplace(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Perform any implementation-specific event handling when an item
            has been changed in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <param name="newItem">
            The item as it is now represented in <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
            <param name="oldItem">
            The item as it was previously represented in
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendResetEvents(System.Func{System.Boolean},System.Func{System.Boolean})">
            <summary>
            Notify all relevant listeners that <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/> is
            cleared.
            </summary>
            
            <param name="preTest">
            A simplified approximation of the value returned by
            <paramref name="action"/>, but that doesn't result in any changes.
            </param>
            <param name="action">The action that causes the reset.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.SendResetEvents(System.Action)">
            <summary>
            Notify all relevant listeners that <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/> is
            cleared.
            </summary>
            
            <param name="action">The action that causes the reset.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.OnResetting">
            <summary>
            Perform any implementation-specific event handling when
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/> is just about to be cleared.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.OnReset">
            <summary>
            Perform any implementation-specific event handling when
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/> has been cleared.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            
            <remarks>
            You can use this property to add new elements by setting the value
            of a key that does not exist in the dictionary; for example, 
            <c>myDictionary["myNonexistentKey"] = myValue</c> in C# 
            (<c>myCollection("myNonexistentKey") = myValue</c> in Visual
            Basic). However, if the specified key already exists in the
            dictionary, setting the value in this manner overwrites the
            existing element. In contrast, the <see cref="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Add(`0,`1)"/>
            method does not modify existing elements.
            <para/>
            Implementations can vary in whether they allow <paramref name="key"/>
            to be <c>null</c>, but the assigned value can always be as long as
            <typeparamref name="TValue"/> is a reference type.
            <para/>
            Getting or setting the value of this property approaches an
            <c>O(1)</c> operation.
            </remarks>
            
            <param name="key">The key of the element to get or set.</param>
            
            <value>The element with the specified key.</value>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c> and the implementation does
            not support this.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is used as an accessor and <paramref name="key"/> is
            not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is used as a setter and the implementation is
            read-only.
            </exception>
            
            <seealso cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.IsReadOnly"/>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            
            <remarks>
            You can use this property to add new elements by setting the value
            of a key that does not exist in the dictionary; for example, 
            <c>myDictionary["myNonexistentKey"] = myValue</c> in C# 
            (<c>myCollection("myNonexistentKey") = myValue</c> in Visual
            Basic). However, if the specified key already exists in the
            dictionary, setting the value in this manner overwrites the
            existing element. In contrast, the <see cref="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Add(`0,`1)"/>
            method does not modify existing elements.
            <para/>
            Implementations can vary in whether they allow <paramref name="key"/>
            to be <c>null</c>, but the assigned value can always be as long as
            <typeparamref name="TValue"/> is a reference type.
            <para/>
            Getting or setting the value of this property approaches an
            <c>O(1)</c> operation.
            </remarks>
            
            <param name="key">The key of the element to get or set.</param>
            
            <value>
            The element with the specified key, or <c>null</c> if the key does
            not exist.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c> and the implementation does
            not support this.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is used as an accessor and <paramref name="key"/> is
            not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is used as a setter and the implementation is read-
            only.
            </exception>
            
            <seealso cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.IsReadOnly"/>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <remarks>
            The order of the keys in the returned <see cref="T:System.Collections.Generic.ICollection`1"/>
            is unspecified, but it is guaranteed to be the same order as the
            corresponding values in the <see cref="T:System.Collections.Generic.ICollection`1"/> returned
            by the <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Values"/> property.
            </remarks>
            
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object
            that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </value>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the keys of
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <remarks>
            The order of the keys in the returned <see cref="T:System.Collections.ICollection"/>
            is unspecified, but it is guaranteed to be the same order as the
            corresponding values in the <see cref="T:System.Collections.ICollection"/> returned
            by the <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Values"/> property.
            </remarks>
            
            <value>
            An <see cref="T:System.Collections.ICollection"/> containing the keys of the object
            that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </value>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <summary>
            Gets a read-only, enumerable collection containing the keys of
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <remarks>
            The order of the keys in the returned <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            is unspecified, but it is guaranteed to be the same order as the
            corresponding values in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> returned
            by the <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Values"/> property.
            </remarks>
            
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the keys of the object
            that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </value>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <remarks>
            The order of the values in the returned <see cref="T:System.Collections.Generic.ICollection`1"/>
            is unspecified, but it is guaranteed to be the same order as the
            corresponding keys in the <see cref="T:System.Collections.Generic.ICollection`1"/> returned
            by the <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Keys"/> property.
            </remarks>
            
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of the object
            that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </value>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the values of
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <remarks>
            The order of the keys in the returned <see cref="T:System.Collections.ICollection"/>
            is unspecified, but it is guaranteed to be the same order as the
            corresponding keys in the <see cref="T:System.Collections.ICollection"/> returned
            by the <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Keys"/> property.
            </remarks>
            
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of the object
            that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </value>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <summary>
            Gets a read-only, enumerable collection containing the values of
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
            
            <remarks>
            The order of the values in the returned <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            is unspecified, but it is guaranteed to be the same order as the
            corresponding keys in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> returned
            by the <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Keys"/> property.
            </remarks>
            
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the keys of the object
            that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </value>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            contains a specific item.
            </summary>
            
            <param name="item">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to locate.
            </param>
            
            <returns>
            <c>true</c> if the value in the
            <see cref="T:System.Collections.Generic.IDictionary`2"/> associated with the key of
            <paramref name="item"/> matches the latter's value; otherwise
            <c>false</c>.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            contains an element with the specified key.
            </summary>
            
            <param name="key">The key to locate.</param>
            
            <returns>
            <c>true</c> if the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            contains an element associated with <paramref name="key"/>;
            otherwise, <c>false</c>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> contains an
            element with the specified key.
            </summary>
            
            <param name="item">The key to locate.</param>
            
            <returns>
            <c>true</c> if the <see cref="T:System.Collections.IDictionary"/> contains an element
            associated with a key <paramref name="item"/>; otherwise,
            <c>false</c>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <c>null</c>.
            </exception>
            
            <seealso cref="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.ContainsKey(`0)"/>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the key-value pairs in
            the dictionary.
            </summary>
            
            <returns>
            An enumerator that can be used to iterate through the dictionary.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the key-value pairs in
            the dictionary as <see cref="T:System.Collections.DictionaryEntry"/> instances boxed to
            <see cref="T:System.Object"/>.
            </summary>
            
            <returns>
            An enumerator that can be used to iterate through the dictionary.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the key-value pairs in
            the dictionary.
            </summary>
            
            <returns>
            An enumerator that can be used to iterate through the dictionary.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with
            <paramref name="key"/>, if that key is found; otherwise, the
            default value for the type of the value parameter. This parameter
            is passed uninitialized.
            </param>
            
            <returns></returns>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Count">
            <summary>
            Gets the number of key-value pairs contained in
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#ICollection#Count">
            <summary>
            Gets the number of key-value pairs contained in
            <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.IsReadOnly">
            <summary>
            Gets a value indicating whether <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/> is
            read-only.
            </summary>
            
            <remarks>
            A collection that is read-only does not allow the addition or
            removal of elements after the collection is created. Note that
            "read-only" in this context does not indicate whether individual
            elements of the collection can be modified, since the
            <see cref="T:System.Collections.Generic.IDictionary`2"/> interface only supports
            addition, removal, and replacement operations.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/> has a
            fixed size.
            </summary>
            
            <remarks>
            A collection with a fixed size does not allow the addition or
            removal of elements after the collection is created, but does
            allow the modification of existing elements.
            <para/>
            A collection with a fixed size is simply a collection with a
            wrapper that prevents adding and removing elements; therefore, if
            changes are made to the underlying collection, including the
            addition or removal of elements, the fixed-size collection
            reflects those changes.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to <see cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Dictionary"/>
            is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            
            <remarks>
            For collections whose underlying store is not publicly available,
            the expected implementation is to return the current instance.
            Note that the pointer to the current instance might not be
            sufficient for collections that wrap other collections; those
            should return the underlying collection's <c>SyncRoot</c> property.
            <para/>
            Most collection classes in the <see cref="N:System.Collections"/>
            namespace also implement a <c>Synchronized</c> method, which
            provides a synchronized wrapper around the underlying collection.
            However, derived classes can provide their own synchronized
            version of the collection using the <c>SyncRoot</c> property. The
            synchronizing code must perform operations on the <c>SyncRoot</c>
            property of the collection, not directly on the collection. This
            ensures proper operation of collections that are derived from
            other objects. Specifically, it maintains proper synchronization
            with other threads that might be simultaneously modifying the
            collection instance.
            <para/>
            Enumerating through a collection is intrinsically not a
            thread-safe procedure. Even when a collection is synchronized,
            other threads can still modify the collection, which causes the
            enumerator to throw an exception. To guarantee thread safety
            during enumeration, you can either lock the collection during the
            entire enumeration or catch the exceptions resulting from changes
            made by other threads.
            </remarks>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            
            <param name="key">
            The object to use as the key of the element to add.
            </param>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
            
            <seealso cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.IsReadOnly"/>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a pre-created <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to the
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            
            <param name="item">The item to add.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            
            <param name="key">
            The <see cref="T:System.Object"/> to use as the key of the element to add.
            </param>
            <param name="value">
            The <see cref="T:System.Object"/> to use as the value of the element to add.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
            
            <seealso cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.IsReadOnly"/>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
            
            <seealso cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.IsReadOnly"/>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#IDictionary#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IDictionary"/> is read-only.
            </exception>
            
            <seealso cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.IsReadOnly"/>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            to an <see cref="T:System.Array"/>, starting at a particular index.
            </summary>
            
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the
            <see cref="T:System.Collections.Generic.IDictionary`2"/>. The <see cref="T:System.Array"/>
            must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying
            begins.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the
            <see cref="T:System.Collections.Generic.IDictionary`2"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of
            the destination array.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            to an <see cref="T:System.Array"/>, starting at a particular index.
            </summary>
            
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the
            <see cref="T:System.Collections.Generic.IDictionary`2"/>. The <see cref="T:System.Array"/>
            must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying
            begins.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.
            <para/>
            -or-
            <para/>
            The number of elements in the
            <see cref="T:System.Collections.Generic.IDictionary`2"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of
            the destination array.
            <para/>
            -or-
            <para/>
            <typeparamref name="TKey"/> cannot be cast automatically to the
            underlying type of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            
            <param name="key">The key of the element to remove.</param>
            
            <returns>
            <c>true</c> if the element is successfully removed; otherwise,
            <c>false</c>. This method also returns <c>false</c> if
            <paramref name="key"/> was not found in the original
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
            
            <seealso cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.IsReadOnly"/>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the element with the specified key from the
            <see cref="T:System.Collections.Generic.IDictionary`2"/> if it also has the
            specified value.
            </summary>
            
            <param name="item">The element to remove.</param>
            
            <returns>
            <c>true</c> if the element is successfully removed; otherwise,
            <c>false</c>. This method also returns <c>false</c> if
            such a pair was not found in the original
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
            
            <seealso cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.IsReadOnly"/>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            
            <param name="key">The key of the element to remove.</param>
            
            <returns>
            <c>true</c> if the element is successfully removed; otherwise,
            <c>false</c>. This method also returns <c>false</c> if
            <paramref name="key"/> was not found in the original
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
            
            <seealso cref="P:AgEitilt.Common.Dictionary.ObservableDictionaryBase`2.IsReadOnly"/>
        </member>
        <member name="T:AgEitilt.Common.Dictionary.IReadOnlyOrderedDictionary`2">
            <summary>
            A read-only dictionary that additionally maintains a predictable
            ordering of its items.
            </summary>
            
            <typeparam name="TKey">
            The type of keys to values in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of the values stored in the dictionary.
            </typeparam>
        </member>
        <member name="T:AgEitilt.Common.Dictionary.OrderedDictionary`2">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> that additionally maintains a
            predictable ordering of its items.
            </summary>
            
            <remarks>
            As this is built around the standard
            <see cref="T:System.Collections.Generic.Dictionary`2"/> type, its keys may not be
            <c>null</c> but its values (as long as <typeparamref name="TValue"/>
            is a nullable type) can.
            <para/>
            Due to <see cref="T:System.Int32"/> being used as the index type in member
            overrides, it is recommended that <typeparamref name="TKey"/>
            <em>not</em> be given the type <see cref="T:System.Int32"/>, and instead that
            integer keys be cast to one of the other number types (such as
            <see cref="T:System.UInt32"/> or <see cref="T:System.Int16"/>).
            <para/>
            TODO: Implement <see cref="T:System.Collections.Generic.LinkedList`1"/>-style access.
            </remarks>
            
            <typeparam name="TKey">
            The type of keys to values in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of the values stored in the dictionary.
            </typeparam>
        </member>
        <member name="T:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator">
            <summary>
            An enumerator for items in an
            <see cref="T:AgEitilt.Common.Dictionary.OrderedDictionary`2"/>.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.list">
            <summary>
            A reference to the dictionary's items.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.currentNode">
            <summary>
            The currently-pointed-to item.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.beforeStart">
            <summary>
            Indicates that the enumerator should be considered "before the
            first element" in the dictionary.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.#ctor(AgEitilt.Common.Dictionary.OrderedDictionary{`0,`1})">
            <summary>
            Initialize an enumerator over a specified dictionary.
            </summary>
            
            <remarks>
            This constructor runs in <c>O(1)</c> time.
            </remarks>
            
            <param name="dictionary">The dictionary to enumerate.</param>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.Current">
            <summary>
            The item currently pointed to by the enumerator.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            The item currently pointed to by the enumerator.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            The item currently pointed to by the enumerator.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
            <summary>
            The key of the item currently pointed to by the enumerator.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
            <summary>
            The value of the item currently pointed to by the enumerator.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.Dispose">
            <summary>
            Releases all resources used by the object.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.MoveNext">
            <summary>
            Increment the enumerator to point to the next element in the
            dictionary.
            </summary>
            
            <returns>
            <c>true</c> if that next element exists and is successfully
            pointed to; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Enumerator.Reset">
            <summary>
            Return the enumerator to point to an element "before the
            start" of the dictionary.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Dictionary.OrderedDictionary`2.dictionary">
            <summary>
            The underlying key-value map used to implement dictionary access.
            </summary>
            
            <remarks>
            While this field would be simpler to maintain if its values were
            simply <c>LinkedListNode&lt;TValue&gt;</c> objects, using the
            longer (reference-typed) form allows the same objects to also be
            used in <see cref="F:AgEitilt.Common.Dictionary.OrderedDictionary`2.list"/>, thus requiring less space and ensuring
            that any reordering of that list will be automatically reflected.
            </remarks>
        </member>
        <member name="F:AgEitilt.Common.Dictionary.OrderedDictionary`2.list">
            <summary>
            The underlying ordered list used to implement indexed access.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.#ctor">
            <summary>
            Initialize an empty dictionary with the default capacity and
            comparer for the key type.
            </summary>
            
            <remarks>
            This constructor runs in <c>O(1) time</c>.
            </remarks>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initialize an empty dictionary with the specified capacity and
            the default comparer for the key type.
            </summary>
            
            <remarks>
            This constructor runs in <c>O(1) time</c>.
            </remarks>
            
            <param name="capacity">
            The initial capacity of the dictionary.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initialize a dictionary with the specified items and the default
            comparer for the key type.
            </summary>
            
            <remarks>
            The initial capacity will match the number of elements in
            <paramref name="items"/>.
            <para/>
            This constructor runs in <c>O(n) time</c>, where <c>n</c> is the
            number of elements in <paramref name="items"/>.
            </remarks>
            
            <param name="items">
            The items with which to initialize the dictionary.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialize an empty dictionary with the default capacity and the
            specified key comparer.
            </summary>
            
            <remarks>
            This constructor runs in <c>O(1) time</c>.
            </remarks>
            
            <param name="comparer">
            The means by which keys should be checked for equality.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialize an empty dictionary with the specified capacity and key
            comparer.
            </summary>
            
            <remarks>
            This constructor runs in <c>O(1) time</c>.
            </remarks>
            
            <param name="capacity">
            The initial capacity of the dictionary.
            </param>
            <param name="comparer">
            The means by which keys should be checked for equality.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialize a dictionary with the specified items and key comparer.
            </summary>
            
            <remarks>
            The initial capacity will match the number of elements in
            <paramref name="items"/>.
            <para/>
            This constructor runs in <c>O(n) time</c>, where <c>n</c> is the
            number of elements in <paramref name="items"/>.
            </remarks>
            
            <param name="items">
            The items with which to initialize the dictionary.
            </param>
            <param name="comparer">
            The means by which keys should be checked for equality.
            </param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.PopulateDictionary(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Add all elements in an existing list to the dictionary.
            </summary>
            
            <remarks>
            This operation runs in <c>O(n)</c> time, where <c>n</c> is the
            number of elements in <paramref name="items"/>.
            </remarks>
            
            <param name="items">The elements to add to the dictionary.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.NodeAt(System.Int32)">
            <summary>
            Step through the list to find the node at an arbitrary index.
            </summary>
            
            <remarks>
            This operation runs in <c>O(n/2)</c> time.
            </remarks>
            
            <param name="index">The index of the node to access.</param>
            
            <returns>The node at <paramref name="index"/>.</returns>
            
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than or equal to 
            <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>, or is less than 0.
            </exception>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specific key.
            </summary>
            
            <remarks>
            If used as a setter and an item already exists with a key equal to
            <paramref name="key"/>, the old value is overwritten.
            <para/>
            Getting or setting values through this property approaches
            <c>O(1)</c>.
            </remarks>
            
            <param name="key">The key of the value to get or set.</param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            This is used as an accessor, and the dictionary does not contain
            any item with a key equal to <paramref name="key"/>.
            </exception>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Item(`0)">
            <summary>
            Gets the value associated with the specific key.
            </summary>
            
            <remarks>
            Getting values through this property approaches <c>O(1)</c>.
            </remarks>
            
            <param name="key">The key of the value to get.</param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The dictionary does not contain any item with a key equal to
            <paramref name="key"/>.
            </exception>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specific key.
            </summary>
            
            <remarks>
            If used as a setter and an item already exists with a key equal to
            <paramref name="key"/>, the old value is overwritten.
            <para/>
            Getting or setting values through this property takes <c>O(1)</c>.
            </remarks>
            
            <param name="key">The key of the value to get or set.</param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="key"/> can not be expressed as a <c>TKey</c>, or
            the new value can not be expressed as a <c>TValue</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            This is used as an accessor, and the dictionary does not contain
            any item with a key equal to <paramref name="key"/>.
            </exception>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            
            <remarks>
            If used as a setter and <paramref name="index"/> is equal to the
            number of items already in the dictionary the new item is added to
            the end, while if it's less, the item at that index is replaced.
            <para/>
            Getting or setting values through this property is <c>O(n/2)</c>.
            </remarks>
            
            <param name="index">The index of the value to get or set.</param>
            
            <exception cref="T:System.ArgumentNullException">
            This is used as a setter, and the
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of the new value is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            This is used as a setter, and the
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of the new value
            already exists in the dictionary.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than or equal to 
            <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>, or is less than 0.
            </exception>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#Generic#IReadOnlyList{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Item(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            
            <remarks>
            Getting values through this property runs in <c>O(n/2)</c> time.
            </remarks>
            
            <param name="index">The index of the value to access.</param>
            
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than or equal to 
            <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>, or is less than 0.
            </exception>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            
            <remarks>
            If used as a setter and <paramref name="index"/> is equal to the
            number of items already in the dictionary the new item is added to
            the end, while if it's less, the item at that index is replaced.
            <para/>
            Getting or setting values through this property is <c>O(n/2)</c>.
            </remarks>
            
            <param name="index">The index of the value to get or set.</param>
            
            <exception cref="T:System.ArgumentNullException">
            This is used as a setter, and the
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of the new value is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            This is used as a setter, and the
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of the new value
            already exists in the dictionary.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than or equal to 
            <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>, or is less than 0.
            </exception>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Keys">
            <summary>
            Get a list of the keys in the dictionary, in the proper order.
            </summary>
            
            <remarks>
            This is a static collection; any changes made to the dictionary
            will not be reflected in the returned object.
            <para/>
            This operation runs in <c>O(n)</c> time; in almost all cases, it
            will be better to use <see cref="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.GetEnumerator"/> to iterate
            through the items as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <summary>
            Get a list of the keys in the dictionary, in the proper order.
            </summary>
            
            <remarks>
            This is a static collection; any changes made to the dictionary
            will not be reflected in the returned object.
            <para/>
            This operation runs in <c>O(n)</c> time; in almost all cases, it
            will be better to use <see cref="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.GetEnumerator"/> to iterate
            through the items as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Get a list of the keys in the dictionary, in the proper order.
            </summary>
            
            <remarks>
            This is a static collection; any changes made to the dictionary
            will not be reflected in the returned object.
            <para/>
            This operation runs in <c>O(n)</c> time; in almost all cases, it
            will be better to use <see cref="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.GetEnumerator"/> to iterate
            through the items as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Values">
            <summary>
            Get a list of the values in the dictionary, in the proper order.
            </summary>
            
            <remarks>
            This is a static collection; any changes made to the dictionary
            will not be reflected in the returned object.
            <para/>
            This operation runs in <c>O(n)</c> time; in almost all cases, it
            will be better to use <see cref="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.GetEnumerator"/> to iterate
            through the items as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <summary>
            Get a list of the keys in the dictionary, in the proper order.
            </summary>
            
            <remarks>
            This is a static collection; any changes made to the dictionary
            will not be reflected in the returned object.
            <para/>
            This operation runs in <c>O(n)</c> time; in almost all cases, it
            will be better to use <see cref="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.GetEnumerator"/> to iterate
            through the items as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Get a list of the keys in the dictionary, in the proper order.
            </summary>
            
            <remarks>
            This is a static collection; any changes made to the dictionary
            will not be reflected in the returned object.
            <para/>
            This operation runs in <c>O(n)</c> time; in almost all cases, it
            will be better to use <see cref="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.GetEnumerator"/> to iterate
            through the items as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </remarks>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Indicates whether an item with the specified key and value exists
            in the dictionary.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="item">The key/value pair to search for.</param>
            
            <returns>
            <c>true</c> if <paramref name="item"/> exists in the dictionary;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicates whether an item with the specified key and value exists
            in the dictionary.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="item">The key/value pair to search for.</param>
            
            <returns>
            <c>true</c> if <paramref name="item"/> exists in the dictionary;
            otherwise <c>false</c>.
            </returns>
            
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> can not be expressed as a
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Indicates whether an item with the specified key exists in the
            dictionary.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="key">The key to search for.</param>
            
            <returns>
            <c>true</c> if <paramref name="key"/> exists in the dictionary;
            otherwise <c>false</c>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Indicates whether an item with the specified key exists in the
            dictionary.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="key">The key to search for.</param>
            
            <returns>
            <c>true</c> if <paramref name="key"/> exists in the dictionary;
            otherwise <c>false</c>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="key"/> can not be expressed as a <c>TKey</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.ContainsValue(`1)">
            <summary>
            Indicates whether any item in the dictionary has the specified
            value.
            </summary>
            
            <remarks>This operation runs in <c>O(n)</c> time.</remarks>
            
            <param name="value">The value to search for.</param>
            
            <returns>
            <c>true</c> if an item with a value equal to
            <paramref name="value"/> exists in the dictionary; otherwise
            <c>false</c>.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.GetEnumerator">
            <summary>
            Get an object allowing iteration through the dictionary, in the
            proper order.
            </summary>
            
            <remarks>
            This operation runs in <c>O(1)</c> time.
            </remarks>
            
            <returns>An enumerator over the dictionary.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            Get an object allowing iteration through the dictionary, in the
            proper order.
            </summary>
            
            <remarks>
            This operation runs in <c>O(1)</c> time.
            </remarks>
            
            <returns>An enumerator over the dictionary.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an object allowing iteration through the dictionary, in the
            proper order.
            </summary>
            
            <remarks>
            This operation runs in <c>O(1)</c> time.
            </remarks>
            
            <returns>An enumerator over the dictionary.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Get an object allowing iteration through the dictionary, in the
            proper order.
            </summary>
            
            <remarks>
            This operation runs in <c>O(1)</c> time.
            </remarks>
            
            <returns>An enumerator over the dictionary.</returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.IndexOf(`0)">
            <summary>
            Returns the index of the item associated with the specified key.
            </summary>
            
            <remarks>
            This operation runs in <c>O(n)</c> time.
            </remarks>
            
            <param name="key">The key of the item to look up.</param>
            
            <returns>
            The index of the item associated with <paramref name="key"/>, or
            <c>-1</c> if no such item exists in the dictionary.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.IndexOf(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns the index of the item with the specified key and value.
            </summary>
            
            <remarks>
            This operation runs in <c>O(n)</c> time.
            </remarks>
            
            <param name="item">The item to look up.</param>
            
            <returns>
            The index of the item represented by <paramref name="item"/>, or
            <c>-1</c> if no such item exists in the dictionary.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> or its
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the item with the specified key and value.
            </summary>
            
            <remarks>
            This operation runs in <c>O(n)</c> time.
            </remarks>
            
            <param name="item">The item to look up.</param>
            
            <returns>
            The index of the item represented by <paramref name="item"/>, or
            <c>-1</c> if no such item exists in the dictionary.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> or its
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> can not be expressed as a
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> with the proper type
            parameters.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with a specific key, if it exists in the
            dictionary.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="key">The key of the value to access.</param>
            <param name="value">
            When this method returns, this will be set to the value associated
            with <paramref name="key"/> in the dictionary if it exists;
            otherwise, the default value of <c>TValue</c>.
            </param>
            
            <returns>
            <c>true</c> if the dictionary contains such a value; otherwise
            <c>false</c>.
            </returns>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count">
            <summary>
            Gets the number of items contained in this dictionary.
            </summary>
            
            <remarks>
            Accessing this value runs in <c>O(1)</c> time.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.IsFixedSize">
            <summary>
            Indicates whether items may be added to or removed from this
            dictionary after creation.
            </summary>
            
            <remarks>
            Accessing this value runs in <c>O(1)</c> time.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Indicates whether items may be added to or removed from this
            dictionary after creation.
            </summary>
            
            <remarks>
            Accessing this value runs in <c>O(1)</c> time.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IList#IsFixedSize">
            <summary>
            Indicates whether items may be added to or removed from this
            dictionary after creation.
            </summary>
            
            <remarks>
            Accessing this value runs in <c>O(1)</c> time.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.IsReadOnly">
            <summary>
            Indicates whether this dictionary can be modified after creation.
            </summary>
            
            <remarks>
            Accessing this value runs in <c>O(1)</c> time.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>
            Indicates whether this dictionary can be modified after creation.
            </summary>
            
            <remarks>
            Accessing this value runs in <c>O(1)</c> time.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IDictionary#IsReadOnly">
            <summary>
            Indicates whether this dictionary can be modified after creation.
            </summary>
            
            <remarks>
            Accessing this value runs in <c>O(1)</c> time.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IList#IsReadOnly">
            <summary>
            Indicates whether this dictionary can be modified after creation.
            </summary>
            
            <remarks>
            Accessing this value runs in <c>O(1)</c> time.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Indicates whether access to the dictionary is synchronized.
            </summary>
            
            <remarks>
            Accessing this value runs in <c>O(1)</c> time.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            dictionary.
            </summary>
            
            <remarks>
            Accessing this value runs in <c>O(1)</c> time.
            </remarks>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add a new item to the dictionary, after all existing items.
            </summary>
            
            <remarks>
            This operation typically approaches <c>O(1)</c> time, except if
            the available capacity has been filled; in that case, it runs in
            <c>O(n)</c> time where <c>n</c> is <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>.
            </remarks>
            
            <param name="item">The item to add.</param>
            
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of
            <paramref name="item"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An item associated with the
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of
            <paramref name="item"/> already exists in the dictionary.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Add a new item to the dictionary, after all existing items.
            </summary>
            
            <remarks>
            This operation typically approaches <c>O(1)</c> time, except if
            the available capacity has been filled; in that case, it runs in
            <c>O(n)</c> time where <c>n</c> is <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>.
            </remarks>
            
            <param name="key">The key at which to add the value.</param>
            <param name="value">The value to add to the dictionary.</param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An item associated with a key equal to <paramref name="key"/>
            already exists in the dictionary.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Add a new item to the dictionary, after all existing items.
            </summary>
            
            <remarks>
            This operation typically approaches <c>O(1)</c> time, except if
            the available capacity has been filled; in that case, it runs in
            <c>O(n)</c> time where <c>n</c> is <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>.
            </remarks>
            
            <param name="key">The key at which to add the value.</param>
            <param name="value">The value to add to the dictionary.</param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An item associated with a key equal to <paramref name="key"/>
            already exists in the dictionary.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="key"/> can not be expressed as a <c>TKey</c>, or
            <paramref name="value"/> can not be expressed as a <c>TValue</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IList#Add(System.Object)">
            <summary>
            Add a new item to the dictionary, after all existing items.
            </summary>
            
            <remarks>
            This operation typically approaches <c>O(1)</c> time, except if
            the available capacity has been filled; in that case, it runs in
            <c>O(n)</c> time where <c>n</c> is <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>.
            </remarks>
            
            <param name="item">
            The key/value pair to add to the dictionary.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of
            <paramref name="item"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An item associated with the
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of
            <paramref name="item"/> already exists in the dictionary.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> can not be expressed as a
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> with the proper type
            parameters.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Clear">
            <summary>
            Remove all items from the dictionary.
            </summary>
            
            <remarks>
            This operation runs in <c>O(n)</c> time, where <c>n</c> is the
            <em>capacity</em> of the dictionary (not <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>).
            </remarks>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies all elements in the dictionary to an array, in order,
            starting at the specified index in that array.
            </summary>
            
            <remarks>
            This ultimately uses
            <see cref="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>, and so that
            documentation will describe the behaviour in more detail.
            <para/>
            This operation runs in <c>O(n)</c> time.
            </remarks>
            
            <param name="array">
            The array to receive the dictionary's items.
            </param>
            <param name="arrayIndex">
            The index in <paramref name="array"/> where the first item will be
            located.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> plus <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/> is greater
            than the length of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all elements in the dictionary to an array, in order,
            starting at the specified index in that array.
            </summary>
            
            <remarks>
            This ultimately uses
            <see cref="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>, and so that
            documentation will describe the behaviour in more detail.
            <para/>
            This operation runs in <c>O(n)</c> time.
            </remarks>
            
            <param name="array">
            The array to receive the dictionary's items.
            </param>
            <param name="index">
            The index in <paramref name="array"/> where the first item will be
            located.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> plus <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/> is greater than
            the length of <paramref name="array"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="array"/> can not be expressed as an array of
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, with the proper type
            parameters.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Insert(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add the given key/value pair to the dictionary, at the specified
            index.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="index">The index at which to add the pair.</param>
            <param name="item">The key/value pair to add.</param>
            
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of
            <paramref name="item"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An item associated with the
            <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of
            <paramref name="item"/> already exists in the dictionary.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>, or
            is less than 0.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Add the given key/value pair to the dictionary, at the specified
            index.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="index">The index at which to add the pair.</param>
            <param name="key">The key at which to add the value.</param>
            <param name="value">The value to add to the dictionary.</param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An item associated with a key equal to <paramref name="key"/>
            already exists in the dictionary.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>, or
            is less than 0.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Insert(System.Int32,System.Object,System.Object)">
            <summary>
            Add the given key/value pair to the dictionary, at the specified
            index.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="index">The index at which to add the pair.</param>
            <param name="key">The key at which to add the value.</param>
            <param name="value">The value to add to the dictionary.</param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An item associated with a key equal to <paramref name="key"/>
            already exists in the dictionary.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>, or
            is less than 0.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="key"/> can not be expressed as a <c>TKey</c>, or
            <paramref name="value"/> can not be expressed as a <c>TValue</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Add the given key/value pair to the dictionary, at the specified
            index.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="index">The index at which to add the pair.</param>
            <param name="item">The key/value pair to add.</param>
            
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> of
            <paramref name="item"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An item associated with the same key as <paramref name="item"/>
            already exists in the dictionary.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>, or
            is less than 0.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="item"/> can not be expressed as a
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> with the proper type
            parameters.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Remove(System.Collections.Generic.LinkedListNode{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Remove the item associated with the specified node from the
            dictionary.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="node">The key of the item to remove.</param>
            
            <returns>
            <c>true</c> if the item was removed successfully; otherwise
            <c>false</c> (including if the item did not exist).
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Remove(`0)">
            <summary>
            Remove the item associated with the specified key from the
            dictionary.
            </summary>
            
            <remarks>
            No exception is thrown if <paramref name="key"/> does not exist.
            <para/>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="key">The key of the item to remove.</param>
            
            <returns>
            <c>true</c> if the item was removed successfully; otherwise
            <c>false</c> (including if the item did not exist).
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Remove the item at the specified index from the dictionary.
            </summary>
            
            <remarks>
            No exception is thrown if <paramref name="key"/> does not exist.
            <para/>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="key">The key of the item to remove.</param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified index from the dictionary.
            </summary>
            
            <remarks>
            This operation runs in <c>O(n/2)</c> time.
            </remarks>
            
            <param name="index">The index of the item to remove.</param>
            
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than or equal to 
            <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>, or is less than 0.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove the specified key/value pair from the dictionary, if it
            exists.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="item">The key/value pair to remove.</param>
            
            <returns>
            <c>true</c> if the item was removed successfully; otherwise
            <c>false</c> (including if the item did not exist).
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.System#Collections#IList#Remove(System.Object)">
            <summary>
            Remove the specified key/value pair from the dictionary, if it
            exists.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="value">The key/value pair to remove.</param>
            
            <returns>
            <c>true</c> if the item was removed successfully; otherwise
            <c>false</c> (including if the item did not exist).
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Update(System.Collections.Generic.LinkedListNode{System.Collections.Generic.KeyValuePair{`0,`1}},`1)">
            <summary>
            Replace the value of the key/value pair pointed to by the given
            node.
            </summary>
            
            <param name="node">The node pointing to the target item.</param>
            <param name="value">The new value of the item.</param>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Update(`0,`1)">
            <summary>
            Replace the value associated with the specified key.
            </summary>
            
            <remarks>
            This operation approaches <c>O(1)</c> time.
            </remarks>
            
            <param name="key">The key of the item to update.</param>
            <param name="value">The new value of the item.</param>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            This is used as an accessor, and the dictionary does not contain
            any item with a key equal to <paramref name="key"/>.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Dictionary.OrderedDictionary`2.Update(System.Int32,`1)">
            <summary>
            Replace the value of the key/value pair at the specified index.
            </summary>
            
            <remarks>
            This operation runs in <c>O(n/2)</c> time.
            </remarks>
            
            <param name="index">The index of the item to update.</param>
            <param name="value">The new value of the item.</param>
            
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than or equal to 
            <see cref="P:AgEitilt.Common.Dictionary.OrderedDictionary`2.Count"/>, or is less than 0.
            </exception>
        </member>
        <member name="T:AgEitilt.Common.Dictionary.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.Resources.Strings.Error_IndexTooHigh">
            <summary>
              Looks up a localized string similar to Attempted to access an index ({0}) beyond the end of the dictionary ({1}).
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Dictionary.Resources.Strings.Error_NegativeIndex">
            <summary>
              Looks up a localized string similar to Attempted to access an index ({0}) less than 0.
            </summary>
        </member>
    </members>
</doc>
