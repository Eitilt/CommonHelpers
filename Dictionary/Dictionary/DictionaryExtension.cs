/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

using System;
using System.Collections.Generic;

namespace AgEitilt.Common.Dictionary.Extensions {
	/// <summary>
	/// Extension methods on the <see cref="IDictionary{TKey, TValue}"/>
	/// interface.
	/// </summary>
	public static class DictionaryExtension {
		/// <summary>
		/// Add the item generated by <paramref name="updateValueFactory"/> to
		/// the dictionary if <paramref name="key"/> already exists in it, or
		/// that generated by <paramref name="addValueFactory"/> otherwise;
		/// returning the respective value.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// <param name="key">
		/// The object to use as the key of the element to add or update.
		/// </param>
		/// <param name="addValueFactory">
		/// The function used to generate a value if the dictionary did not
		/// contain <paramref name="key"/>.
		/// </param>
		/// <param name="updateValueFactory">
		/// The function used to generate a value if the dictionary already
		/// contained <paramref name="key"/>.
		/// </param>
		/// 
		/// <returns>
		/// The value generated by <paramref name="updateValueFactory"/> if
		/// the key already existed; otherwise that generated by
		/// <paramref name="addValueFactory"/>.
		/// </returns>
		/// 
		/// <exception cref="ArgumentNullException">
		/// <paramref name="key"/> is <c>null</c>.
		/// </exception>
		public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary,
				TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) {
			TValue value;
			if (dictionary.ContainsKey(key))
				value = updateValueFactory(key, dictionary[key]);
			else
				value = addValueFactory(key);

			dictionary[key] = value;
			return value;
		}
		/// <summary>
		/// Add <paramref name="addValue"/> to the dictionary if
		/// <paramref name="key"/> already exists in it, or
		/// <paramref name="addValue"/> otherwise; returning the respective
		/// value.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// <param name="key">
		/// The object to use as the key of the element to add or update.
		/// </param>
		/// <param name="addValue">
		/// The value to add if the dictionary did not contain
		/// <paramref name="key"/>.
		/// </param>
		/// <param name="updateValueFactory">
		/// The function used to generate a value if the dictionary already
		/// contained <paramref name="key"/>.
		/// </param>
		/// 
		/// <returns>
		/// The value generated by <paramref name="updateValueFactory"/> if
		/// the key already existed; otherwise <paramref name="addValue"/>.
		/// </returns>
		/// 
		/// <exception cref="ArgumentNullException">
		/// <paramref name="key"/> is <c>null</c>.
		/// </exception>
		public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary,
				TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) =>
			dictionary.AddOrUpdate(key, (_ => addValue), updateValueFactory);

		/// <summary>
		/// Retrieve the requested value from the dictionary, creating a new
		/// entry if necessary using the default <typeparamref name="TValue"/>
		/// constructor.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// <param name="key">The dictionary key to access.</param>
		/// 
		/// <returns>
		/// The object located at <paramref name="key"/> in
		/// <paramref name="dictionary"/>.
		/// </returns>
		/// 
		/// <exception cref="ArgumentNullException">
		/// <paramref name="key"/> is <c>null</c>.
		/// </exception>
		public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key)
				where TValue : new() =>
			dictionary.GetOrAdd(key, (_ => new TValue()));
		/// <summary>
		/// Retrieve the requested value from the dictionary, creating a new
		/// entry if necessary.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// <param name="key">The dictionary key to access.</param>
		/// <param name="value">
		/// The value to add if <paramref name="key"/> was not in the
		/// dictionary.
		/// </param>
		/// 
		/// <returns>
		/// The object located at <paramref name="key"/> in
		/// <paramref name="dictionary"/>.
		/// </returns>
		/// 
		/// <exception cref="ArgumentNullException">
		/// <paramref name="key"/> is <c>null</c>.
		/// </exception>
		public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value)
				where TValue : new() =>
			dictionary.GetOrAdd(key, (_ => value));
		/// <summary>
		/// Retrieve the requested value from the dictionary, creating a new
		/// entry if necessary.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// <param name="key">The dictionary key to access.</param>
		/// <param name="valueFactory">
		/// The function used to generate a value if the dictionary did not
		/// contain <paramref name="key"/>.
		/// </param>
		/// 
		/// <returns>
		/// The object located at <paramref name="key"/> in
		/// <paramref name="dictionary"/>.
		/// </returns>
		/// 
		/// <exception cref="ArgumentNullException">
		/// <paramref name="key"/> is <c>null</c>.
		/// </exception>
		public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> valueFactory)
				where TValue : new() {
			if (dictionary.ContainsKey(key) == false)
				dictionary.Add(key, valueFactory(key));

			return dictionary[key];
		}

		/// <summary>
		/// Simplifies testing whether the dictionary contains no items.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// 
		/// <returns>
		/// <c>true</c> if no key/value pair exists in the dictionary;
		/// otherwise <c>false</c>.
		/// </returns>
		public static bool IsEmpty<TKey, TValue>(this IDictionary<TKey, TValue> dictionary) =>
			dictionary.Count == 0;

		/// <summary>
		/// Copies the key/value pairs comprising the dictionary to an array.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// 
		/// <returns>The array of key/value pairs.</returns>
		public static KeyValuePair<TKey, TValue>[] ToArray<TKey, TValue>(this IDictionary<TKey, TValue> dictionary) =>
			System.Linq.Enumerable.ToArray(dictionary);

		/// <summary>
		/// Add a value to the dictionary as long as the desired key does not
		/// already exist.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// <param name="key">
		/// The object to use as the key of the element to add.
		/// </param>
		/// <param name="value">
		/// The object to use as the value of the element to add.
		/// </param>
		/// 
		/// <returns>
		/// <c>true</c> if the value was added successfully, or false if
		/// <paramref name="key"/> already exists.
		/// </returns>
		/// 
		/// <exception cref="ArgumentNullException">
		/// <paramref name="key"/> is <c>null</c>.
		/// </exception>
		public static bool TryAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value) {
			if (dictionary.ContainsKey(key))
				return false;

			dictionary.Add(key, value);
			return true;
		}

		/// <summary>
		/// Remove a value from the dictionary if the given key exists.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// <param name="key">The dictionary key to remove.</param>
		/// <param name="value">
		/// Once this method completes, the value previously associated with
		/// <paramref name="key"/> if it existed in the dictionary, or the
		/// default value of <typeparamref name="TValue"/> otherwise.
		/// </param>
		/// 
		/// <returns>
		/// <c>true</c> if the value was removed successfully, or false if
		/// <paramref name="key"/> did not exist.
		/// </returns>
		/// 
		/// <exception cref="ArgumentNullException">
		/// <paramref name="key"/> is <c>null</c>.
		/// </exception>
		public static bool TryRemove<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, out TValue value) {
			if (dictionary.ContainsKey(key)) {
				value = dictionary[key];
				dictionary.Remove(key);
				return true;
			} else {
				value = default(TValue);
				return false;
			}
		}

		/// <summary>
		/// Replace a value in the dictionary if the given key exists.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// <param name="key">The dictionary key to replace.</param>
		/// <param name="newValue">
		/// The value to update the key with, if all conditions are met.
		/// </param>
		/// 
		/// <returns>
		/// <c>true</c> if the value was replaced successfully, or false if
		/// <paramref name="key"/> did not exist.
		/// </returns>
		/// 
		/// <exception cref="ArgumentNullException">
		/// <paramref name="key"/> is <c>null</c>.
		/// </exception>
		public static bool TryUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue newValue) =>
			dictionary.TryUpdate(key, newValue, (_ => true));
		/// <summary>
		/// Replace a value in the dictionary if the given key exists and the
		/// existing value is equal to a desired comparison.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// <param name="key">The dictionary key to replace.</param>
		/// <param name="newValue">
		/// The value to update the key with, if all conditions are met.
		/// </param>
		/// <param name="comparisonValue">
		/// The value to use for testing the equality of the existing key.
		/// </param>
		/// 
		/// <returns>
		/// <c>true</c> if the value was replaced successfully, or false if
		/// <paramref name="key"/> did not exist or the existing value is not
		/// equal to <paramref name="comparisonValue"/>.
		/// </returns>
		/// 
		/// <exception cref="ArgumentNullException">
		/// <paramref name="key"/> is <c>null</c>.
		/// </exception>
		public static bool TryUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue newValue, TValue comparisonValue) =>
			dictionary.TryUpdate(key, newValue, (value => value.Equals(comparisonValue))) ;
		/// <summary>
		/// Replace a value in the dictionary if the given key exists and the
		/// existing value is equal to a desired comparison.
		/// </summary>
		/// 
		/// <typeparam name="TKey">
		/// The type used for the dictionary's keys.
		/// </typeparam>
		/// <typeparam name="TValue">
		/// The type used for the dictionary's values.
		/// </typeparam>
		/// 
		/// <param name="dictionary">
		/// The <see cref="IDictionary{TKey, TValue}"/> on which to operate.
		/// </param>
		/// <param name="key">The dictionary key to replace.</param>
		/// <param name="newValue">
		/// The value to update the key with, if all conditions are met.
		/// </param>
		/// <param name="comparison">
		/// The test to use in deciding whether to replace the value.
		/// </param>
		/// 
		/// <returns>
		/// <c>true</c> if the value was replaced successfully, or false if
		/// <paramref name="key"/> did not exist or
		/// <paramref name="comparison"/> returns <c>false</c> when passed the
		/// existing value.
		/// </returns>
		/// 
		/// <exception cref="ArgumentNullException">
		/// <paramref name="key"/> is <c>null</c>.
		/// </exception>
		public static bool TryUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue newValue, Predicate<TValue> comparison) {
			if (dictionary.ContainsKey(key) && comparison(dictionary[key])) {
				dictionary[key] = newValue;
				return true;
			} else {
				return false;
			}
		}
	}
}
