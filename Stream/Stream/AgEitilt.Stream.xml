<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AgEitilt.Stream</name>
    </assembly>
    <members>
        <member name="T:AgEitilt.Common.Stream.ConcatStream">
            <summary>
            Join multiple streams into a single continuous object.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Stream.ConcatStream.streams">
            <summary>
            The underlying individual streams, before concatenation.
            </summary>
        </member>
        <member name="F:AgEitilt.Common.Stream.ConcatStream.index">
            <summary>
            The index of the currently active individual <see cref="T:System.IO.Stream"/>
            within <see cref="F:AgEitilt.Common.Stream.ConcatStream.streams"/>.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.IncrementIndex">
            <summary>
            Progress to the next concatenated stream, seeking to its beginning
            if possible.
            </summary>
            
            <returns>
            `false` there is no available next stream, `true` otherwise.
            </returns>
        </member>
        <member name="P:AgEitilt.Common.Stream.ConcatStream.CanRead">
            <summary>
            Whether all concatenated streams (and therefore this wrapper)
            support reading.
            </summary>
            
            <remarks>
            If any concatenated stream is closed, this property returns false.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Stream.ConcatStream.CanSeek">
            <summary>
            Whether all concatenated streams (and therefore this wrapper)
            support seeking.
            </summary>
            
            <remarks>
            If any concatenated stream is closed, this property returns false.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Stream.ConcatStream.CanTimeout">
            <summary>
            Whether any concatenated stream (and therefore this wrapper)
            may time out.
            </summary>
        </member>
        <member name="P:AgEitilt.Common.Stream.ConcatStream.CanWrite">
            <summary>
            Whether all concatenated streams (and therefore this wrapper)
            support writing.
            </summary>
            
            <remarks>
            If any concatenated stream is closed, this property returns false.
            </remarks>
        </member>
        <member name="P:AgEitilt.Common.Stream.ConcatStream.Length">
            <summary>
            The length in bytes of the combined stream.
            </summary>
            
            <exception cref="T:System.NotSupportedException">
            At least one concatenated <see cref="T:System.IO.Stream"/> does not support
            seeking.
            </exception>
        </member>
        <member name="P:AgEitilt.Common.Stream.ConcatStream.Position">
            <summary>
            Gets or sets the position of the concatenated stream.
            </summary>
            
            <exception cref="T:System.IndexOutOfRangeException">
            All concatenated streams must support seeking to get or set the
            position. Use the <see cref="P:AgEitilt.Common.Stream.ConcatStream.CanSeek"/> property to determine
            whether the stream supports seeking.
            <para/>
            Unlike other <see cref="T:System.IO.Stream"/> implementations, seeking to any
            location beyond the length of the stream is <em>not</em> supported.
            
            TODO: See about bringing that into compliance.
            <para />
            The Position property does not keep track of the number of bytes
            from the stream that have been consumed, skipped, or both.
            </exception>
            
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.Seek(System.Int64,System.IO.SeekOrigin)"/>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.#ctor(System.IO.Stream[])">
            <summary>
            Concatenate all the given streams, in order, into a single
            point of access.
            </summary>
            
            <param name="streams">The streams to join.</param>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.Flush">
            <summary>
            Clears all buffers for the concatenated streams and causes any
            buffered data to be written to the underlying device.
            </summary>
            
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.FlushAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously clears all buffers for the concatenated streams and
            causes any buffered data to be written to the underlying device.
            </summary>
            
            <param name="cancellationToken">The token to monitor for
            cancellation requests. The default value is
            <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            
            <returns>
            A task that represents the asynchronous flush operation.
            </returns>
            
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.Flush"/>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the
            position within the stream by the number of bytes read.
            </summary>
            
            <remarks>
            Use the <see cref="P:AgEitilt.Common.Stream.ConcatStream.CanRead"/> property to determine whether the
            current instance supports reading. Use the <see cref="M:AgEitilt.Common.Stream.ConcatStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/>
            method to read asynchronously from the current stream.
            <para/>
            If streams concatenated before <see cref="P:AgEitilt.Common.Stream.ConcatStream.Position"/> have more
            elements added to them, the output remains unaffected until and
            unless <see cref="P:AgEitilt.Common.Stream.ConcatStream.Position"/> is seeked to before those new
            elements.
            <para/>
            The current position within the stream is advanced by the number
            of bytes read; however, if an exception occurs, the current
            position within the stream remains unchanged. The call will block
            until at least one byte of data can be read, in the event that no
            data is available -- it returns 0 only when there is no more data
            in the stream and no more is expected (such as a closed socket or
            end of file). Fewer bytes than requested may be returned even if
            the end of the stream has not been reached.
            
            TODO: Ensure that the rewind-on-exception occurs properly.
            </remarks>
            
            <param name="buffer">
            When this method returns, the buffer contains the specified byte
            array with the values between offset and (offset + count - 1)
            replaced by the bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the
            data read from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
            
            <returns>
            The total number of bytes read into the buffer. This can be less
            than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been
            reached.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The sum of offset and count is larger than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/>
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.ReadByte"/>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a sequence of bytes from the current stream
            and advances the position within the stream by the number of bytes
            read.
            </summary>
            
            <remarks>
            Use the <see cref="P:AgEitilt.Common.Stream.ConcatStream.CanRead"/> property to determine whether the
            current instance supports reading. Use the <see cref="M:AgEitilt.Common.Stream.ConcatStream.Read(System.Byte[],System.Int32,System.Int32)"/>
            method to read synchronously from the current stream.
            <para/>
            If streams concatenated before <see cref="P:AgEitilt.Common.Stream.ConcatStream.Position"/> have more
            elements added to them, the output remains unaffected until and
            unless <see cref="P:AgEitilt.Common.Stream.ConcatStream.Position"/> is seeked to before those new
            elements.
            <para/>
            The current position within the stream is advanced by the number
            of bytes read; however, if an exception occurs, the current
            position within the stream remains unchanged. The call will block
            until at least one byte of data can be read, in the event that no
            data is available -- it returns 0 only when there is no more data
            in the stream and no more is expected (such as a closed socket or
            end of file). Fewer bytes than requested may be returned even if
            the end of the stream has not been reached.
            
            TODO: Ensure that the rewind-on-exception occurs properly.
            <para/>
            TODO: If any method could benefit from a test suite, it's this one
            TODO: Should also break into smaller functions
            </remarks>
            
            <param name="buffer">
            When this method returns, the buffer contains the specified byte
            array with the values between offset and (offset + count - 1)
            replaced by the bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the
            data read from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value
            is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            
            <returns>
            A task that represents the asynchronous read operation. The value
            is the total number of bytes read into the buffer. This can be less
            than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been
            reached.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The sum of offset and count is larger than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is currently in use by a previous read operation.
            
            TODO: Implement this.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.Read(System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.ReadByte"/>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the
            stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            
            <remarks>
            Use the <see cref="P:AgEitilt.Common.Stream.ConcatStream.CanRead"/> property to determine whether the
            current instance supports reading.
            </remarks>
            
            <returns>
            The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at the
            end of the stream.
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.Read(System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            
            <remarks>
            Use the CanSeek property to determine whether the current instance
            supports seeking.
            <para/>
            If <paramref name="offset"/> is negative, the new position
            precedes the position specified by <paramref name="origin"/> by
            the number of bytes specified by <paramref name="offset"/>. If
            <paramref name="origin"/> is zero (0), the new position is the
            position specified by <paramref name="origin"/>. If
            <paramref name="offset"/> is positive, the new position follows
            the position specified by <paramref name="origin"/> by the number
            of bytes specified by <paramref name="offset"/>.
            <para/>
            Unlike other <see cref="T:System.IO.Stream"/> implementations, seeking to any
            location beyond the length of the stream is <em>not</em> supported.
            
            TODO: See about bringing that into compliance.
            </remarks>
            
            <param name="offset">
            A byte offset relative to the origin parameter.
            </param>
            <param name="origin">
            The reference point used to obtain the new position.
            </param>
            
            <returns>The new position within the current stream.</returns>
            
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            
            <remarks>
            If the specified value is less than the current length of the
            stream, the stream is truncated. If the specified value is larger
            than the current length of the stream, the stream is expanded. If
            the stream is expanded, the contents of the stream between the old
            and the new length are not defined.
            <para/>
            Use the <see cref="P:AgEitilt.Common.Stream.ConcatStream.CanRead"/> property to determine whether the
            current stream supports writing, and the <see cref="P:AgEitilt.Common.Stream.ConcatStream.CanSeek"/>
            property to determine whether seeking is supported.
            </remarks>
            
            <param name="value">
            The desired length of the current stream in bytes.
            </param>
            
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support both writing and seeking.
            </exception>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the
            current position within this stream by the number of bytes written.
            </summary>
            
            <remarks>
            Use the <see cref="P:AgEitilt.Common.Stream.ConcatStream.CanWrite"/> property to determine whether the
            current instance supports writing. 
            <para/>
            If the write operation is successful, the position within the
            stream advances by the number of bytes written. If an exception
            occurs, the position within the stream remains unchanged.
            
            TODO: Ensure this is properly respected.
            </remarks>
            
            <param name="buffer">
            An array of bytes. This method copies <paramref name="count"/>
            bytes from <paramref name="buffer"/> to the current stream. 
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which
            to begin copying bytes to the current stream.
            </param>
            <param name="count">
            The number of bytes to be written to the current stream.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The sum of offset and count is larger than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/>
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.WriteByte(System.Byte)"/>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a sequence of bytes to the current stream,
            advances the current position within this stream by the number of
            bytes written, and monitors cancellation requests.
            </summary>
            
            <remarks>
            Use the <see cref="P:AgEitilt.Common.Stream.ConcatStream.CanWrite"/> property to determine whether the
            current instance supports writing. Use the <see cref="M:AgEitilt.Common.Stream.ConcatStream.Write(System.Byte[],System.Int32,System.Int32)"/>
            method to read synchronously from the current stream.
            <para/>
            If the write operation is successful, the position within the
            stream advances by the number of bytes written. If an exception
            occurs, the position within the stream remains unchanged.
            
            TODO: Ensure this is properly respected.
            </remarks>
            
            <param name="buffer">
            An array of bytes. This method copies <paramref name="count"/>
            bytes from <paramref name="buffer"/> to the current stream. 
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which
            to begin copying bytes to the current stream.
            </param>
            <param name="count">
            The number of bytes to be written to the current stream.
            </param>
            <param name="cancellationToken">
            The token to monitor for cancellation requests. The default value
            is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            
            <returns>
            A task that represents the asynchronous write operation.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The sum of offset and count is larger than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is currently in use by a previous write operation.
            
            TODO: Implement this.
            
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.Write(System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.WriteByte(System.Byte)"/>
        </member>
        <member name="M:AgEitilt.Common.Stream.ConcatStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances
            the position within the stream by one byte.
            </summary>
            
            <remarks>
            Use the <see cref="P:AgEitilt.Common.Stream.ConcatStream.CanWrite"/> property to determine whether the
            current instance supports writing.
            </remarks>
            
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.Write(System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:AgEitilt.Common.Stream.ConcatStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="T:AgEitilt.Common.Stream.StreamExtension">
            <summary>
            Extension methods on the <see cref="T:System.IO.Stream"/> class.
            </summary>
        </member>
        <member name="M:AgEitilt.Common.Stream.StreamExtension.ReadAll(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream until it ends or the requested number of
            bytes has been reached.
            </summary>
            
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> on which to operate.
            </param>
            <param name="buffer">
            The destination in which to save the read bytes.
            </param>
            <param name="offset">
            The index in <paramref name="buffer"/> of the first read byte.
            </param>
            <param name="count">The number of bytes to read.</param>
            
            <returns>
            The number of bytes that were successfully read. This may be less
            than <paramref name="count"/> if the stream ended before that
            number of bytes was reached.
            </returns>
        </member>
        <member name="M:AgEitilt.Common.Stream.StreamExtension.ReadAllAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream asynchronously until it ends or the requested
            number of bytes has been reached.
            </summary>
            
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> on which to operate.
            </param>
            <param name="buffer">
            The destination in which to save the read bytes.
            </param>
            <param name="offset">
            The index in <paramref name="buffer"/> of the first read byte.
            </param>
            <param name="count">The number of bytes to read.</param>
            
            <returns>
            The number of bytes that were successfully read. This may be less
            than <paramref name="count"/> if the stream ended before that
            number of bytes was reached.
            </returns>
        </member>
    </members>
</doc>
